<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GGBoard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GGBoard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed Oct  9 23:38:56 2024
<BR><P>
<H3>Maximum Stack Usage =       2512 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; TDT_Loop &rArr; TDT_Loop_500Hz() &rArr; DEBUG() &rArr; RoboticArm::ctrlPosition(JointState, EndForce, unsigned char) &rArr; Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[47]">ADC4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[48]">ADC5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32g4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4a]">COMP1_2_3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4b]">COMP4_5_6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4c]">COMP7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[65]">CORDIC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4d]">CRS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from judgement.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[61]">DMA1_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[62]">DMA2_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[63]">DMA2_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[64]">DMA2_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5f]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32g4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from fdcan.o(.text.FDCAN1_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[57]">FDCAN2_IT0_IRQHandler</a> from fdcan.o(.text.FDCAN2_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[58]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[59]">FDCAN3_IT0_IRQHandler</a> from fdcan.o(.text.FDCAN3_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5a]">FDCAN3_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[66]">FMAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[53]">FPU_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[55]">I2C4_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[54]">I2C4_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3b]">LPTIM1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5c]">LPUART1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32g4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g4xx_it.o(.text.NMI_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32g4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4e]">SAI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[56]">SPI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32g4xx_it.o(.text.SVC_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32g4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[68]">SystemInit</a> from system_stm32g4xx.o(.text.SystemInit) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4f]">TIM20_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[52]">TIM20_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[51]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[50]">TIM20_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[41]">TIM7_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[49]">UCPD1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from vision.o(.text.USART1_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from dbus.o(.text.USART2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32g4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[9a]">_GLOBAL__sub_I_SMUniversal.cpp</a> from smuniversal.o(.text._GLOBAL__sub_I_SMUniversal.cpp) referenced from smuniversal.o(.init_array)
 <LI><a href="#[aa]">_GLOBAL__sub_I_arm.cpp</a> from arm.o(.text._GLOBAL__sub_I_arm.cpp) referenced from arm.o(.init_array)
 <LI><a href="#[97]">_GLOBAL__sub_I_chassisTask.cpp</a> from chassistask.o(.text._GLOBAL__sub_I_chassisTask.cpp) referenced from chassistask.o(.init_array)
 <LI><a href="#[a3]">_GLOBAL__sub_I_checkOreState.cpp</a> from checkorestate.o(.text._GLOBAL__sub_I_checkOreState.cpp) referenced from checkorestate.o(.init_array)
 <LI><a href="#[a7]">_GLOBAL__sub_I_dbus.cpp</a> from dbus.o(.text._GLOBAL__sub_I_dbus.cpp) referenced from dbus.o(.init_array)
 <LI><a href="#[94]">_GLOBAL__sub_I_devList.cpp</a> from devlist.o(.text._GLOBAL__sub_I_devList.cpp) referenced from devlist.o(.init_array)
 <LI><a href="#[ac]">_GLOBAL__sub_I_dynamics.cpp</a> from dynamics.o(.text._GLOBAL__sub_I_dynamics.cpp) referenced from dynamics.o(.init_array)
 <LI><a href="#[a0]">_GLOBAL__sub_I_exchangeOreState.cpp</a> from exchangeorestate.o(.text._GLOBAL__sub_I_exchangeOreState.cpp) referenced from exchangeorestate.o(.init_array)
 <LI><a href="#[ad]">_GLOBAL__sub_I_fdcan.cpp</a> from fdcan.o(.text._GLOBAL__sub_I_fdcan.cpp) referenced from fdcan.o(.init_array)
 <LI><a href="#[98]">_GLOBAL__sub_I_gimbalTask.cpp</a> from gimbaltask.o(.text._GLOBAL__sub_I_gimbalTask.cpp) referenced from gimbaltask.o(.init_array)
 <LI><a href="#[a1]">_GLOBAL__sub_I_handModeState.cpp</a> from handmodestate.o(.text._GLOBAL__sub_I_handModeState.cpp) referenced from handmodestate.o(.init_array)
 <LI><a href="#[a2]">_GLOBAL__sub_I_hidArmorState.cpp</a> from hidarmorstate.o(.text._GLOBAL__sub_I_hidArmorState.cpp) referenced from hidarmorstate.o(.init_array)
 <LI><a href="#[a4]">_GLOBAL__sub_I_imageTran.cpp</a> from imagetran.o(.text._GLOBAL__sub_I_imageTran.cpp) referenced from imagetran.o(.init_array)
 <LI><a href="#[99]">_GLOBAL__sub_I_judgeTask.cpp</a> from judgetask.o(.text._GLOBAL__sub_I_judgeTask.cpp) referenced from judgetask.o(.init_array)
 <LI><a href="#[a8]">_GLOBAL__sub_I_judgement.cpp</a> from judgement.o(.text._GLOBAL__sub_I_judgement.cpp) referenced from judgement.o(.init_array)
 <LI><a href="#[ab]">_GLOBAL__sub_I_kinematics.cpp</a> from kinematics.o(.text._GLOBAL__sub_I_kinematics.cpp) referenced from kinematics.o(.init_array)
 <LI><a href="#[95]">_GLOBAL__sub_I_ledTask.cpp</a> from ledtask.o(.text._GLOBAL__sub_I_ledTask.cpp) referenced from ledtask.o(.init_array)
 <LI><a href="#[a6]">_GLOBAL__sub_I_motor.cpp</a> from motor.o(.text._GLOBAL__sub_I_motor.cpp) referenced from motor.o(.init_array)
 <LI><a href="#[9b]">_GLOBAL__sub_I_offsetStateMachine.cpp</a> from offsetstatemachine.o(.text._GLOBAL__sub_I_offsetStateMachine.cpp) referenced from offsetstatemachine.o(.init_array)
 <LI><a href="#[a5]">_GLOBAL__sub_I_oreBin.cpp</a> from orebin.o(.text._GLOBAL__sub_I_oreBin.cpp) referenced from orebin.o(.init_array)
 <LI><a href="#[9c]">_GLOBAL__sub_I_oreMotionStateMachine.cpp</a> from oremotionstatemachine.o(.text._GLOBAL__sub_I_oreMotionStateMachine.cpp) referenced from oremotionstatemachine.o(.init_array)
 <LI><a href="#[9f]">_GLOBAL__sub_I_pickOreState.cpp</a> from pickorestate.o(.text._GLOBAL__sub_I_pickOreState.cpp) referenced from pickorestate.o(.init_array)
 <LI><a href="#[96]">_GLOBAL__sub_I_stateTask.cpp</a> from statetask.o(.text._GLOBAL__sub_I_stateTask.cpp) referenced from statetask.o(.init_array)
 <LI><a href="#[9d]">_GLOBAL__sub_I_takeGoldState.cpp</a> from takegoldstate.o(.text._GLOBAL__sub_I_takeGoldState.cpp) referenced from takegoldstate.o(.init_array)
 <LI><a href="#[9e]">_GLOBAL__sub_I_takeSilveryState.cpp</a> from takesilverystate.o(.text._GLOBAL__sub_I_takeSilveryState.cpp) referenced from takesilverystate.o(.init_array)
 <LI><a href="#[a9]">_GLOBAL__sub_I_vision.cpp</a> from vision.o(.text._GLOBAL__sub_I_vision.cpp) referenced from vision.o(.init_array)
 <LI><a href="#[6b]">CheckState::exit()</a> from checkorestate.o(.text._ZN10CheckState4exitEv) referenced from checkorestate.o(.rodata._ZTV10CheckState)
 <LI><a href="#[6a]">CheckState::update()</a> from checkorestate.o(.text._ZN10CheckState6updateEv) referenced from checkorestate.o(.rodata._ZTV10CheckState)
 <LI><a href="#[70]">GimbalTask::run()</a> from gimbaltask.o(.text._ZN10GimbalTask3runEv) referenced from gimbaltask.o(.rodata._ZTV10GimbalTask)
 <LI><a href="#[6f]">GimbalTask::init()</a> from gimbaltask.o(.text._ZN10GimbalTask4initEv) referenced from gimbaltask.o(.rodata._ZTV10GimbalTask)
 <LI><a href="#[72]">ChassisTask::enableCallBack()</a> from chassistask.o(.text._ZN11ChassisTask14enableCallBackEv) referenced from chassistask.o(.rodata._ZTV11ChassisTask)
 <LI><a href="#[73]">ChassisTask::disableCallBack()</a> from chassistask.o(.text._ZN11ChassisTask15disableCallBackEv) referenced from chassistask.o(.rodata._ZTV11ChassisTask)
 <LI><a href="#[71]">ChassisTask::rcUpdateCallBack()</a> from chassistask.o(.text._ZN11ChassisTask16rcUpdateCallBackEv) referenced from chassistask.o(.rodata._ZTV11ChassisTask)
 <LI><a href="#[75]">ChassisTask::run()</a> from chassistask.o(.text._ZN11ChassisTask3runEv) referenced from chassistask.o(.rodata._ZTV11ChassisTask)
 <LI><a href="#[74]">ChassisTask::init()</a> from chassistask.o(.text._ZN11ChassisTask4initEv) referenced from chassistask.o(.rodata._ZTV11ChassisTask)
 <LI><a href="#[77]">OffsetState::exit()</a> from offsetstatemachine.o(.text._ZN11OffsetState4exitEv) referenced from offsetstatemachine.o(.rodata._ZTV11OffsetState)
 <LI><a href="#[76]">OffsetState::update()</a> from offsetstatemachine.o(.text._ZN11OffsetState6updateEv) referenced from offsetstatemachine.o(.rodata._ZTV11OffsetState)
 <LI><a href="#[6d]">VirtualTask::enableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask14enableCallBackEv) referenced from gimbaltask.o(.rodata._ZTV10GimbalTask)
 <LI><a href="#[6d]">VirtualTask::enableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask14enableCallBackEv) referenced from virtualtask.o(.rodata._ZTV11VirtualTask)
 <LI><a href="#[6d]">VirtualTask::enableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask14enableCallBackEv) referenced from ledtask.o(.rodata._ZTV7LedTask)
 <LI><a href="#[6d]">VirtualTask::enableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask14enableCallBackEv) referenced from judgetask.o(.rodata._ZTV9JudgeTask)
 <LI><a href="#[6e]">VirtualTask::disableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask15disableCallBackEv) referenced from gimbaltask.o(.rodata._ZTV10GimbalTask)
 <LI><a href="#[6e]">VirtualTask::disableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask15disableCallBackEv) referenced from virtualtask.o(.rodata._ZTV11VirtualTask)
 <LI><a href="#[6e]">VirtualTask::disableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask15disableCallBackEv) referenced from ledtask.o(.rodata._ZTV7LedTask)
 <LI><a href="#[6e]">VirtualTask::disableCallBack()</a> from ledtask.o(.text._ZN11VirtualTask15disableCallBackEv) referenced from judgetask.o(.rodata._ZTV9JudgeTask)
 <LI><a href="#[6c]">VirtualTask::rcUpdateCallBack()</a> from ledtask.o(.text._ZN11VirtualTask16rcUpdateCallBackEv) referenced from gimbaltask.o(.rodata._ZTV10GimbalTask)
 <LI><a href="#[6c]">VirtualTask::rcUpdateCallBack()</a> from ledtask.o(.text._ZN11VirtualTask16rcUpdateCallBackEv) referenced from virtualtask.o(.rodata._ZTV11VirtualTask)
 <LI><a href="#[6c]">VirtualTask::rcUpdateCallBack()</a> from ledtask.o(.text._ZN11VirtualTask16rcUpdateCallBackEv) referenced from ledtask.o(.rodata._ZTV7LedTask)
 <LI><a href="#[6c]">VirtualTask::rcUpdateCallBack()</a> from ledtask.o(.text._ZN11VirtualTask16rcUpdateCallBackEv) referenced from judgetask.o(.rodata._ZTV9JudgeTask)
 <LI><a href="#[7a]">ExchangeState::exit()</a> from exchangeorestate.o(.text._ZN13ExchangeState4exitEv) referenced from exchangeorestate.o(.rodata._ZTV13ExchangeState)
 <LI><a href="#[79]">ExchangeState::update()</a> from exchangeorestate.o(.text._ZN13ExchangeState6updateEv) referenced from exchangeorestate.o(.rodata._ZTV13ExchangeState)
 <LI><a href="#[7c]">HandModeState::exit()</a> from handmodestate.o(.text._ZN13HandModeState4exitEv) referenced from handmodestate.o(.rodata._ZTV13HandModeState)
 <LI><a href="#[7b]">HandModeState::update()</a> from handmodestate.o(.text._ZN13HandModeState6updateEv) referenced from handmodestate.o(.rodata._ZTV13HandModeState)
 <LI><a href="#[7e]">TakeGoldState::exit()</a> from takegoldstate.o(.text._ZN13TakeGoldState4exitEv) referenced from takegoldstate.o(.rodata._ZTV13TakeGoldState)
 <LI><a href="#[7d]">TakeGoldState::update()</a> from takegoldstate.o(.text._ZN13TakeGoldState6updateEv) referenced from takegoldstate.o(.rodata._ZTV13TakeGoldState)
 <LI><a href="#[80]">TakeInitState::exit()</a> from oremotionstatemachine.o(.text._ZN13TakeInitState4exitEv) referenced from oremotionstatemachine.o(.rodata._ZTV13TakeInitState)
 <LI><a href="#[7f]">TakeInitState::update()</a> from oremotionstatemachine.o(.text._ZN13TakeInitState6updateEv) referenced from oremotionstatemachine.o(.rodata._ZTV13TakeInitState)
 <LI><a href="#[82]">TakeFloorState::exit()</a> from pickorestate.o(.text._ZN14TakeFloorState4exitEv) referenced from pickorestate.o(.rodata._ZTV14TakeFloorState)
 <LI><a href="#[81]">TakeFloorState::update()</a> from pickorestate.o(.text._ZN14TakeFloorState6updateEv) referenced from pickorestate.o(.rodata._ZTV14TakeFloorState)
 <LI><a href="#[84]">ExitPerfectState::exit()</a> from oremotionstatemachine.o(.text._ZN16ExitPerfectState4exitEv) referenced from oremotionstatemachine.o(.rodata._ZTV16ExitPerfectState)
 <LI><a href="#[83]">ExitPerfectState::update()</a> from oremotionstatemachine.o(.text._ZN16ExitPerfectState6updateEv) referenced from oremotionstatemachine.o(.rodata._ZTV16ExitPerfectState)
 <LI><a href="#[86]">TakeSilveryState::exit()</a> from takesilverystate.o(.text._ZN16TakeSilveryState4exitEv) referenced from takesilverystate.o(.rodata._ZTV16TakeSilveryState)
 <LI><a href="#[85]">TakeSilveryState::update()</a> from takesilverystate.o(.text._ZN16TakeSilveryState6updateEv) referenced from takesilverystate.o(.rodata._ZTV16TakeSilveryState)
 <LI><a href="#[88]">State::exit()</a> from offsetstatemachine.o(.text._ZN5State4exitEv) referenced from offsetstatemachine.o(.rodata._ZTV5State)
 <LI><a href="#[87]">State::update()</a> from offsetstatemachine.o(.text._ZN5State6updateEv) referenced from offsetstatemachine.o(.rodata._ZTV5State)
 <LI><a href="#[8a]">LedTask::run()</a> from ledtask.o(.text._ZN7LedTask3runEv) referenced from ledtask.o(.rodata._ZTV7LedTask)
 <LI><a href="#[89]">LedTask::init()</a> from ledtask.o(.text._ZN7LedTask4initEv) referenced from ledtask.o(.rodata._ZTV7LedTask)
 <LI><a href="#[8c]">HidState::exit()</a> from hidarmorstate.o(.text._ZN8HidState4exitEv) referenced from hidarmorstate.o(.rodata._ZTV8HidState)
 <LI><a href="#[8b]">HidState::update()</a> from hidarmorstate.o(.text._ZN8HidState6updateEv) referenced from hidarmorstate.o(.rodata._ZTV8HidState)
 <LI><a href="#[8e]">JudgeTask::run()</a> from judgetask.o(.text._ZN9JudgeTask3runEv) referenced from judgetask.o(.rodata._ZTV9JudgeTask)
 <LI><a href="#[8d]">JudgeTask::init()</a> from judgetask.o(.text._ZN9JudgeTask4initEv) referenced from judgetask.o(.rodata._ZTV9JudgeTask)
 <LI><a href="#[90]">StateTask::enableCallBack()</a> from statetask.o(.text._ZN9StateTask14enableCallBackEv) referenced from statetask.o(.rodata._ZTV9StateTask)
 <LI><a href="#[91]">StateTask::disableCallBack()</a> from statetask.o(.text._ZN9StateTask15disableCallBackEv) referenced from statetask.o(.rodata._ZTV9StateTask)
 <LI><a href="#[8f]">StateTask::rcUpdateCallBack()</a> from statetask.o(.text._ZN9StateTask16rcUpdateCallBackEv) referenced from statetask.o(.rodata._ZTV9StateTask)
 <LI><a href="#[93]">StateTask::run()</a> from statetask.o(.text._ZN9StateTask3runEv) referenced from statetask.o(.rodata._ZTV9StateTask)
 <LI><a href="#[92]">StateTask::init()</a> from statetask.o(.text._ZN9StateTask4initEv) referenced from statetask.o(.rodata._ZTV9StateTask)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from virtualtask.o(.rodata._ZTV11VirtualTask)
 <LI><a href="#[69]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[67]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[69]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[2aa]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ab]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b1]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2ac]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ad]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2ae]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2af]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>

<P><STRONG><a name="[2b0]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCtrl::updateFirstLoadUi()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[272]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getJudgeData()
</UL>

<P><STRONG><a name="[2b1]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2b3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::VarCale(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::clear()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[2b5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ae]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::remoteControlUpdate(Speed*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::canHandle(unsigned char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::remoteControlUpdate(Speed*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::teachDataUpdate()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::deltaDataUpdate()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::canHandle(unsigned char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::remoteControlUpdate(Speed*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::teachDataUpdate()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::deltaDataUpdate()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::canHandle(unsigned char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[2b7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[c2]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[bc]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[bb]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[2a4]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2ba]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[2a3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2bb]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2bc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>Append_CRC16_Check_Sum</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, crc.o(.text.Append_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>

<P><STRONG><a name="[cc]"></a>Append_CRC8_Check_Sum</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, crc.o(.text.Append_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, judgement.o(.text.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; Online::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::update()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::addFullCount()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_DMA_IsActiveFlag_TC4P11DMA_TypeDef
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_ClearFlag_TC4P11DMA_TypeDef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fdcan.o(.text.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; Motor::canHandle(unsigned char*) &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fdcan.o(.text.FDCAN2_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FDCAN2_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; Motor::canHandle(unsigned char*) &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fdcan.o(.text.FDCAN3_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FDCAN3_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; Motor::canHandle(unsigned char*) &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, crc.o(.text.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[cd]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, crc.o(.text.Get_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[198]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::trySend()
</UL>

<P><STRONG><a name="[194]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 184 bytes, Stack size 28 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>

<P><STRONG><a name="[195]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ConfigGlobalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>

<P><STRONG><a name="[196]"></a>HAL_FDCAN_ConfigRxFifoOverwrite</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigRxFifoOverwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_ConfigRxFifoOverwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>

<P><STRONG><a name="[e0]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fdcan.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ErrorStatusCallback &rArr; HAL_FDCAN_GetError
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_FDCAN_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_GetError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
</UL>

<P><STRONG><a name="[e8]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[d7]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_HighPriorityMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; Motor::canHandle(unsigned char*) &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_IT0_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 720 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>

<P><STRONG><a name="[e2]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, fdcan.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, fdcan.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; Motor::canHandle(unsigned char*) &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::canHandle(MyCanRxStruct*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::canHandle(unsigned char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_RxFifo1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>

<P><STRONG><a name="[df]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TimeoutOccurredCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TimestampWraparoundCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxBufferAbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fdcan.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_FDCAN_TxBufferCompleteCallback &rArr; SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::trySend()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxEventFifoCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_GPIO_Init</STRONG> (Thumb, 886 bytes, Stack size 44 bytes, stm32g4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[e3]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[e6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>LL_DMA_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32g4xx_ll_dma.o(.text.LL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[f7]"></a>LL_GPIO_Init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init(unsigned short)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[fe]"></a>LL_RCC_GetUARTClockFreq</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RCC_GetUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[105]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[1b7]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32g4xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[108]"></a>LL_TIM_Init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_Init &rArr; LL_TIM_SetRepetitionCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[10d]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC6Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC5Config
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[114]"></a>LL_USART_Init</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetPrescaler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = SysTick_Handler &rArr; TDT_Loop &rArr; TDT_Loop_500Hz() &rArr; DEBUG() &rArr; RoboticArm::ctrlPosition(JointState, EndForce, unsigned char) &rArr; Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>TDT_Loop</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, schedule.o(.text.TDT_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504<LI>Call Chain = TDT_Loop &rArr; TDT_Loop_500Hz() &rArr; DEBUG() &rArr; RoboticArm::ctrlPosition(JointState, EndForce, unsigned char) &rArr; Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_1000Hz()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_200Hz()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_100Hz()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_50Hz()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_20Hz()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_10Hz()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_2Hz()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_1Hz()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, vision.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::update()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_USART_ReceiveData8P13USART_TypeDef
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_DMA_DisableChannelP11DMA_TypeDefj
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, dbus.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; _ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::update()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::handleData(const volatile unsigned char*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_USART_ReceiveData8P13USART_TypeDef
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_DMA_DisableChannelP11DMA_TypeDefj
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, crc.o(.text.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>sysTickInit()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, board.o(.text._Z11sysTickInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sysTickInit() &rArr; _ZL19NVIC_EncodePriorityjjj
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26__NVIC_GetPriorityGroupingv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19NVIC_EncodePriorityjjj
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14SysTick_Configj
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>TDT_Loop_1Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z12TDT_Loop_1Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[132]"></a>TDT_Loop_2Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z12TDT_Loop_2Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[182]"></a>boardALLInit()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, schedule.o(.text._Z12boardALLInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = boardALLInit() &rArr; Vision::init() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canMsgInit()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::init(FDCAN_HandleTypeDef*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParam()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>getSysTimeUs()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, board.o(.text._Z12getSysTimeUsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs(unsigned)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>

<P><STRONG><a name="[18a]"></a>pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)</STRONG> (Thumb, 3346 bytes, Stack size 600 bytes, pathplan.o(.text._Z12pathPlanCaltP8PathPlan8EndPointS1_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = pathPlanCalt(PathPlan*, EndPoint, EndPoint, float) &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
</UL>

<P><STRONG><a name="[131]"></a>TDT_Loop_10Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z13TDT_Loop_10Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[130]"></a>TDT_Loop_20Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z13TDT_Loop_20Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[12f]"></a>TDT_Loop_50Hz()</STRONG> (Thumb, 566 bytes, Stack size 16 bytes, schedule.o(.text._Z13TDT_Loop_50Hzv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TDT_Loop_50Hz() &rArr; Online::isOffLine()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::isOffLine()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[191]"></a>softwareReset()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text._Z13softwareResetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softwareReset()
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SystemResetv
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[193]"></a>MX_FDCAN1_Init()</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, fdcan.o(.text._Z14MX_FDCAN1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MX_FDCAN1_Init() &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigRxFifoOverwrite
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::init(FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[199]"></a>MX_FDCAN2_Init()</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, fdcan.o(.text._Z14MX_FDCAN2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MX_FDCAN2_Init() &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigRxFifoOverwrite
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::init(FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[19a]"></a>MX_FDCAN3_Init()</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, fdcan.o(.text._Z14MX_FDCAN3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MX_FDCAN3_Init() &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigRxFifoOverwrite
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::init(FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[12e]"></a>TDT_Loop_100Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z14TDT_Loop_100Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[12d]"></a>TDT_Loop_200Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z14TDT_Loop_200Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[12c]"></a>TDT_Loop_500Hz()</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, schedule.o(.text._Z14TDT_Loop_500Hzv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = TDT_Loop_500Hz() &rArr; DEBUG() &rArr; RoboticArm::ctrlPosition(JointState, EndForce, unsigned char) &rArr; Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::isOnline()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::check()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::sendMsg()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::disforceHandle()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::taskSchedule()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::motionDetect()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softwareReset()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[12b]"></a>TDT_Loop_1000Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z15TDT_Loop_1000Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[1a2]"></a>self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*)</STRONG> (Thumb, 474 bytes, Stack size 208 bytes, fdcan.o(.text._Z17self_CAN_TransmitP19FDCAN_HandleTypeDefP13MyCanTxStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*) &rArr; SelfCanFIFO::push(MyCanTxStruct) &rArr; SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::push(MyCanTxStruct)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::sendMsg()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::motorEnable()
</UL>

<P><STRONG><a name="[1a4]"></a>SystemClock_Config()</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, main.o(.text._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config() &rArr; _ZL27LL_RCC_PLL_ConfigDomain_SYSjjjj
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28LL_PWR_EnableRange1BoostModev
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_RCC_PLL_EnableDomain_SYSv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_RCC_PLL_ConfigDomain_SYSjjjj
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26LL_RCC_SetUSARTClockSourcej
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26LL_RCC_SetFDCANClockSourcej
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_RCC_SetUSBClockSourcej
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_RCC_SetAPB2Prescalerj
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_RCC_SetAPB1Prescalerj
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22LL_RCC_SetSysClkSourcej
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22LL_RCC_SetAHBPrescalerj
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22LL_RCC_GetSysClkSourcev
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_RCC_HSI48_IsReadyv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19LL_RCC_HSI48_Enablev
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19LL_FLASH_SetLatencyj
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19LL_FLASH_GetLatencyv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18LL_RCC_PLL_IsReadyv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18LL_RCC_LSI_IsReadyv
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18LL_RCC_HSE_IsReadyv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17LL_RCC_PLL_Enablev
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17LL_RCC_LSI_Enablev
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL17LL_RCC_HSE_Enablev
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>DEBUG()</STRONG> (Thumb, 552 bytes, Stack size 208 bytes, devlist.o(.text._Z5DEBUGv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = DEBUG() &rArr; RoboticArm::ctrlPosition(JointState, EndForce, unsigned char) &rArr; Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndForce::EndForce__sub_object()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[207]"></a>endSM()</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, smuniversal.o(.text._Z5endSMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = endSM()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPerfectState::exit()
</UL>

<P><STRONG><a name="[183]"></a>delayMs(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, board.o(.text._Z7delayMsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delayMs(unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[1be]"></a>delayUs(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, board.o(.text._Z7delayUsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
</UL>

<P><STRONG><a name="[1bf]"></a>startSM(StateMachine*)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, smuniversal.o(.text._Z7startSMP12StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = startSM(StateMachine*) &rArr; loadParam() &rArr; DmMotor::setPlan(int, _MitParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParam()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeInitState::update()
</UL>

<P><STRONG><a name="[187]"></a>loadParam()</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, devlist.o(.text._Z9loadParamv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = loadParam() &rArr; DmMotor::setPlan(int, _MitParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::setParam(int, float, float, float, float, float)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::setPlan(int, _MitParam*)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateTask::init()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateTask::run()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSM(StateMachine*)
</UL>

<P><STRONG><a name="[1c3]"></a>CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned)</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, fdcan.o(.text._ZN10CanSendMsgC2EP19FDCAN_HandleTypeDefbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air::Air()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2bf]"></a>CanSendMsg::CanSendMsg__sub_object(FDCAN_HandleTypeDef*, bool, unsigned)</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, fdcan.o(.text._ZN10CanSendMsgC2EP19FDCAN_HandleTypeDefbj), UNUSED)

<P><STRONG><a name="[6b]"></a>CheckState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, checkorestate.o(.text._ZN10CheckState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkorestate.o(.rodata._ZTV10CheckState)
</UL>
<P><STRONG><a name="[6a]"></a>CheckState::update()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, checkorestate.o(.text._ZN10CheckState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkorestate.o(.rodata._ZTV10CheckState)
</UL>
<P><STRONG><a name="[1c7]"></a>CheckState::CheckState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, checkorestate.o(.text._ZN10CheckStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckState::CheckState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c0]"></a>CheckState::CheckState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, checkorestate.o(.text._ZN10CheckStateC2EPP5State), UNUSED)

<P><STRONG><a name="[70]"></a>GimbalTask::run()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gimbaltask.o(.text._ZN10GimbalTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GimbalTask::run() &rArr; Gimbal::update() &rArr; Motor::ctrlPosition(float) &rArr; Motor::ctrlSpeed(float) &rArr; Pid::calculate(unsigned char) &rArr; Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbaltask.o(.rodata._ZTV10GimbalTask)
</UL>
<P><STRONG><a name="[6f]"></a>GimbalTask::init()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gimbaltask.o(.text._ZN10GimbalTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GimbalTask::init() &rArr; Gimbal::init() &rArr; Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbaltask.o(.rodata._ZTV10GimbalTask)
</UL>
<P><STRONG><a name="[1cb]"></a>GimbalTask::GimbalTask__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gimbaltask.o(.text._ZN10GimbalTaskC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GimbalTask::GimbalTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1ce]"></a>JointAngle::JointAngle__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, devlist.o(.text._ZN10JointAngleC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = JointAngle::JointAngle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateAngleHandle(JointAngle)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateToMech(JointAngle)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[18f]"></a>JointState::JointState__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, devlist.o(.text._ZN10JointStateC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = JointState::JointState__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
</UL>

<P><STRONG><a name="[1cd]"></a>Kinematics::GetJointAngle(EndPoint, unsigned char)</STRONG> (Thumb, 2744 bytes, Stack size 312 bytes, kinematics.o(.text._ZN10Kinematics13GetJointAngleE8EndPointh))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Kinematics::GetJointAngle(EndPoint, unsigned char) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointAngle::JointAngle__sub_object()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getPosition()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::getPosition()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::getPitchAngle()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::getRollAngle()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[1d7]"></a>Kinematics::mat2qua2euler(float(*)[3], float*)</STRONG> (Thumb, 1684 bytes, Stack size 200 bytes, kinematics.o(.text._ZN10Kinematics13mat2qua2eulerEPA3_fPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Kinematics::mat2qua2euler(float(*)[3], float*) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
</UL>

<P><STRONG><a name="[1f4]"></a>Kinematics::Kinematics()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, kinematics.o(.text._ZN10KinematicsC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Kinematics::Kinematics()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c1]"></a>Kinematics::Kinematics__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, kinematics.o(.text._ZN10KinematicsC2Ev), UNUSED)

<P><STRONG><a name="[142]"></a>RemoteCtrl::handleData(const volatile unsigned char*)</STRONG> (Thumb, 260 bytes, Stack size 12 bytes, dbus.o(.text._ZN10RemoteCtrl10handleDataEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RemoteCtrl::handleData(const volatile unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>RemoteCtrl::motionDetect()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dbus.o(.text._ZN10RemoteCtrl12motionDetectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RemoteCtrl::motionDetect() &rArr; Online::isOnline()
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::isOnline()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[19c]"></a>RemoteCtrl::taskSchedule()</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, dbus.o(.text._ZN10RemoteCtrl12taskScheduleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RemoteCtrl::taskSchedule() &rArr; Online::isOffLine()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::isOffLine()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[188]"></a>RemoteCtrl::init()</STRONG> (Thumb, 344 bytes, Stack size 160 bytes, dbus.o(.text._ZN10RemoteCtrl4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RemoteCtrl::init() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26__NVIC_GetPriorityGroupingv
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_APB1_GRP1_EnableClockj
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB2_GRP1_EnableClockj
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB1_GRP1_EnableClockj
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_USART_DisableFIFOP13USART_TypeDef
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19NVIC_EncodePriorityjjj
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LL_USART_EnableP13USART_TypeDef
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[1ea]"></a>RemoteCtrl::RemoteCtrl__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dbus.o(.text._ZN10RemoteCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RemoteCtrl::RemoteCtrl__sub_object() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1bb]"></a>RoboticArm::GetNowParam()</STRONG> (Thumb, 2048 bytes, Stack size 192 bytes, arm.o(.text._ZN10RoboticArm11GetNowParamEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = RoboticArm::GetNowParam() &rArr; Kinematics::mat2qua2euler(float(*)[3], float*) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getPosition()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::getPosition()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::getPitchAngle()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::getRollAngle()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
</UL>

<P><STRONG><a name="[1bd]"></a>RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)</STRONG> (Thumb, 576 bytes, Stack size 368 bytes, arm.o(.text._ZN10RoboticArm12ctrlPositionE10JointState8EndForceh))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = RoboticArm::ctrlPosition(JointState, EndForce, unsigned char) &rArr; Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndForce::EndForce__sub_object()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(float)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::ctrlPosition(float, float)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::ctrlPosition(float, float)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateAngleHandle(JointAngle)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateToMech(JointAngle)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
</UL>

<P><STRONG><a name="[1ee]"></a>RoboticArm::CalculateToMech(JointAngle)</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, arm.o(.text._ZN10RoboticArm15CalculateToMechE10JointAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RoboticArm::CalculateToMech(JointAngle) &rArr; JointAngle::JointAngle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointAngle::JointAngle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[1ed]"></a>RoboticArm::CalculateAngleHandle(JointAngle)</STRONG> (Thumb, 668 bytes, Stack size 72 bytes, arm.o(.text._ZN10RoboticArm20CalculateAngleHandleE10JointAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RoboticArm::CalculateAngleHandle(JointAngle) &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointAngle::JointAngle__sub_object()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::getPosition()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::getPitchAngle()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::getRollAngle()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[1f3]"></a>RoboticArm::RoboticArm()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, arm.o(.text._ZN10RoboticArmC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RoboticArm::RoboticArm() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointAngle::JointAngle__sub_object()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndState::EndState__sub_object()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::Dynamics()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::Kinematics()
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[2c2]"></a>RoboticArm::RoboticArm__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, arm.o(.text._ZN10RoboticArmC2Ev), UNUSED)

<P><STRONG><a name="[72]"></a>ChassisTask::enableCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassistask.o(.text._ZN11ChassisTask14enableCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisTask::enableCallBack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassistask.o(.rodata._ZTV11ChassisTask)
</UL>
<P><STRONG><a name="[73]"></a>ChassisTask::disableCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassistask.o(.text._ZN11ChassisTask15disableCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisTask::disableCallBack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassistask.o(.rodata._ZTV11ChassisTask)
</UL>
<P><STRONG><a name="[71]"></a>ChassisTask::rcUpdateCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, chassistask.o(.text._ZN11ChassisTask16rcUpdateCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisTask::rcUpdateCallBack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassistask.o(.rodata._ZTV11ChassisTask)
</UL>
<P><STRONG><a name="[75]"></a>ChassisTask::run()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, chassistask.o(.text._ZN11ChassisTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ChassisTask::run() &rArr; Chassis::update() &rArr; Chassis::keyboardUpdate(Speed*) &rArr; Asr::setTar(float, float, float) &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassistask.o(.rodata._ZTV11ChassisTask)
</UL>
<P><STRONG><a name="[74]"></a>ChassisTask::init()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chassistask.o(.text._ZN11ChassisTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChassisTask::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassistask.o(.rodata._ZTV11ChassisTask)
</UL>
<P><STRONG><a name="[1f9]"></a>ChassisTask::ChassisTask__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, chassistask.o(.text._ZN11ChassisTaskC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ChassisTask::ChassisTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1fa]"></a>DoubleMotor::DoubleMotor(Motor*, Motor*, signed char)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, doublemotor.o(.text._ZN11DoubleMotorC2EP5MotorS1_a), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::VarCale(unsigned char)
</UL>

<P><STRONG><a name="[238]"></a>DoubleMotor::DoubleMotor__sub_object(Motor*, Motor*, signed char)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, doublemotor.o(.text._ZN11DoubleMotorC2EP5MotorS1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DoubleMotor::DoubleMotor__sub_object(Motor*, Motor*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::Wrist(Motor*, Motor*)
</UL>

<P><STRONG><a name="[25e]"></a>JointTorque::JointTorque__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, devlist.o(.text._ZN11JointTorqueC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = JointTorque::JointTorque__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
</UL>

<P><STRONG><a name="[77]"></a>OffsetState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, offsetstatemachine.o(.text._ZN11OffsetState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OffsetState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> offsetstatemachine.o(.rodata._ZTV11OffsetState)
</UL>
<P><STRONG><a name="[76]"></a>OffsetState::update()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, offsetstatemachine.o(.text._ZN11OffsetState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OffsetState::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> offsetstatemachine.o(.rodata._ZTV11OffsetState)
</UL>
<P><STRONG><a name="[1fc]"></a>OffsetState::OffsetState(State**)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, offsetstatemachine.o(.text._ZN11OffsetStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OffsetState::OffsetState(State**) &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[2c3]"></a>OffsetState::OffsetState__sub_object(State**)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, offsetstatemachine.o(.text._ZN11OffsetStateC2EPP5State), UNUSED)

<P><STRONG><a name="[1fd]"></a>SelfCanFIFO::getFIFOCount()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, fdcan.o(.text._ZN11SelfCanFIFO12getFIFOCountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SelfCanFIFO::getFIFOCount()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::trySend()
</UL>

<P><STRONG><a name="[1fe]"></a>SelfCanFIFO::pop()</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, fdcan.o(.text._ZN11SelfCanFIFO3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SelfCanFIFO::pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::trySend()
</UL>

<P><STRONG><a name="[1a3]"></a>SelfCanFIFO::push(MyCanTxStruct)</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, fdcan.o(.text._ZN11SelfCanFIFO4pushE13MyCanTxStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SelfCanFIFO::push(MyCanTxStruct) &rArr; SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::trySend()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*)
</UL>

<P><STRONG><a name="[ec]"></a>SelfCanFIFO::trySend()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fdcan.o(.text._ZN11SelfCanFIFO7trySendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::pop()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::getFIFOCount()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::push(MyCanTxStruct)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
</UL>

<P><STRONG><a name="[1ff]"></a>SelfCanFIFO::SelfCanFIFO__sub_object(FDCAN_HandleTypeDef*)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, fdcan.o(.text._ZN11SelfCanFIFOC2EP19FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SelfCanFIFO::SelfCanFIFO__sub_object(FDCAN_HandleTypeDef*) &rArr; MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[25b]"></a>VirtualTask::setAlwaysRun(bool)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, virtualtask.o(.text._ZN11VirtualTask12setAlwaysRunEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VirtualTask::setAlwaysRun(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask::init()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::init()
</UL>

<P><STRONG><a name="[6d]"></a>VirtualTask::enableCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ledtask.o(.text._ZN11VirtualTask14enableCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VirtualTask::enableCallBack()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ledtask.o(.rodata._ZTV7LedTask)
<LI> gimbaltask.o(.rodata._ZTV10GimbalTask)
<LI> judgetask.o(.rodata._ZTV9JudgeTask)
<LI> virtualtask.o(.rodata._ZTV11VirtualTask)
</UL>
<P><STRONG><a name="[6e]"></a>VirtualTask::disableCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ledtask.o(.text._ZN11VirtualTask15disableCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VirtualTask::disableCallBack()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ledtask.o(.rodata._ZTV7LedTask)
<LI> gimbaltask.o(.rodata._ZTV10GimbalTask)
<LI> judgetask.o(.rodata._ZTV9JudgeTask)
<LI> virtualtask.o(.rodata._ZTV11VirtualTask)
</UL>
<P><STRONG><a name="[6c]"></a>VirtualTask::rcUpdateCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ledtask.o(.text._ZN11VirtualTask16rcUpdateCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VirtualTask::rcUpdateCallBack()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ledtask.o(.rodata._ZTV7LedTask)
<LI> gimbaltask.o(.rodata._ZTV10GimbalTask)
<LI> judgetask.o(.rodata._ZTV9JudgeTask)
<LI> virtualtask.o(.rodata._ZTV11VirtualTask)
</UL>
<P><STRONG><a name="[1cc]"></a>VirtualTask::VirtualTask__sub_object()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, virtualtask.o(.text._ZN11VirtualTaskC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalTask::GimbalTask__sub_object()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask::ChassisTask__sub_object()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateTask::StateTask__sub_object()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask::LedTask__sub_object()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::JudgeTask__sub_object()
</UL>

<P><STRONG><a name="[28a]"></a>StateMachine::update()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, statemachine.o(.text._ZN12StateMachine6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StateMachine::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateTask::run()
</UL>

<P><STRONG><a name="[201]"></a>StateMachine::StateMachine()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, statemachine.o(.text._ZN12StateMachineC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = StateMachine::StateMachine() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c4]"></a>StateMachine::StateMachine__sub_object()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, statemachine.o(.text._ZN12StateMachineC2Ev), UNUSED)

<P><STRONG><a name="[7a]"></a>ExchangeState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, exchangeorestate.o(.text._ZN13ExchangeState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ExchangeState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exchangeorestate.o(.rodata._ZTV13ExchangeState)
</UL>
<P><STRONG><a name="[79]"></a>ExchangeState::update()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, exchangeorestate.o(.text._ZN13ExchangeState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExchangeState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exchangeorestate.o(.rodata._ZTV13ExchangeState)
</UL>
<P><STRONG><a name="[202]"></a>ExchangeState::ExchangeState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, exchangeorestate.o(.text._ZN13ExchangeStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExchangeState::ExchangeState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c5]"></a>ExchangeState::ExchangeState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, exchangeorestate.o(.text._ZN13ExchangeStateC2EPP5State), UNUSED)

<P><STRONG><a name="[7c]"></a>HandModeState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, handmodestate.o(.text._ZN13HandModeState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HandModeState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> handmodestate.o(.rodata._ZTV13HandModeState)
</UL>
<P><STRONG><a name="[7b]"></a>HandModeState::update()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, handmodestate.o(.text._ZN13HandModeState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandModeState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> handmodestate.o(.rodata._ZTV13HandModeState)
</UL>
<P><STRONG><a name="[203]"></a>HandModeState::HandModeState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, handmodestate.o(.text._ZN13HandModeStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandModeState::HandModeState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c6]"></a>HandModeState::HandModeState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, handmodestate.o(.text._ZN13HandModeStateC2EPP5State), UNUSED)

<P><STRONG><a name="[200]"></a>MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, dmmotor.o(.text._ZN13MyCanTxStructC2EjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::sendMsg()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::motorEnable()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::SelfCanFIFO__sub_object(FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[7e]"></a>TakeGoldState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, takegoldstate.o(.text._ZN13TakeGoldState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TakeGoldState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takegoldstate.o(.rodata._ZTV13TakeGoldState)
</UL>
<P><STRONG><a name="[7d]"></a>TakeGoldState::update()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, takegoldstate.o(.text._ZN13TakeGoldState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TakeGoldState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takegoldstate.o(.rodata._ZTV13TakeGoldState)
</UL>
<P><STRONG><a name="[204]"></a>TakeGoldState::TakeGoldState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, takegoldstate.o(.text._ZN13TakeGoldStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TakeGoldState::TakeGoldState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c7]"></a>TakeGoldState::TakeGoldState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, takegoldstate.o(.text._ZN13TakeGoldStateC2EPP5State), UNUSED)

<P><STRONG><a name="[80]"></a>TakeInitState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, oremotionstatemachine.o(.text._ZN13TakeInitState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TakeInitState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oremotionstatemachine.o(.rodata._ZTV13TakeInitState)
</UL>
<P><STRONG><a name="[7f]"></a>TakeInitState::update()</STRONG> (Thumb, 1534 bytes, Stack size 16 bytes, oremotionstatemachine.o(.text._ZN13TakeInitState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TakeInitState::update() &rArr; startSM(StateMachine*) &rArr; loadParam() &rArr; DmMotor::setPlan(int, _MitParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSM(StateMachine*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oremotionstatemachine.o(.rodata._ZTV13TakeInitState)
</UL>
<P><STRONG><a name="[205]"></a>TakeInitState::TakeInitState(State**)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, oremotionstatemachine.o(.text._ZN13TakeInitStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TakeInitState::TakeInitState(State**) &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[2c8]"></a>TakeInitState::TakeInitState__sub_object(State**)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, oremotionstatemachine.o(.text._ZN13TakeInitStateC2EPP5State), UNUSED)

<P><STRONG><a name="[82]"></a>TakeFloorState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, pickorestate.o(.text._ZN14TakeFloorState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TakeFloorState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pickorestate.o(.rodata._ZTV14TakeFloorState)
</UL>
<P><STRONG><a name="[81]"></a>TakeFloorState::update()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pickorestate.o(.text._ZN14TakeFloorState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TakeFloorState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pickorestate.o(.rodata._ZTV14TakeFloorState)
</UL>
<P><STRONG><a name="[206]"></a>TakeFloorState::TakeFloorState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pickorestate.o(.text._ZN14TakeFloorStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TakeFloorState::TakeFloorState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2c9]"></a>TakeFloorState::TakeFloorState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pickorestate.o(.text._ZN14TakeFloorStateC2EPP5State), UNUSED)

<P><STRONG><a name="[84]"></a>ExitPerfectState::exit()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oremotionstatemachine.o(.text._ZN16ExitPerfectState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ExitPerfectState::exit() &rArr; endSM()
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oremotionstatemachine.o(.rodata._ZTV16ExitPerfectState)
</UL>
<P><STRONG><a name="[83]"></a>ExitPerfectState::update()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, oremotionstatemachine.o(.text._ZN16ExitPerfectState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ExitPerfectState::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oremotionstatemachine.o(.rodata._ZTV16ExitPerfectState)
</UL>
<P><STRONG><a name="[208]"></a>ExitPerfectState::ExitPerfectState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oremotionstatemachine.o(.text._ZN16ExitPerfectStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExitPerfectState::ExitPerfectState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[2ca]"></a>ExitPerfectState::ExitPerfectState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oremotionstatemachine.o(.text._ZN16ExitPerfectStateC2EPP5State), UNUSED)

<P><STRONG><a name="[86]"></a>TakeSilveryState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, takesilverystate.o(.text._ZN16TakeSilveryState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TakeSilveryState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takesilverystate.o(.rodata._ZTV16TakeSilveryState)
</UL>
<P><STRONG><a name="[85]"></a>TakeSilveryState::update()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, takesilverystate.o(.text._ZN16TakeSilveryState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TakeSilveryState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takesilverystate.o(.rodata._ZTV16TakeSilveryState)
</UL>
<P><STRONG><a name="[209]"></a>TakeSilveryState::TakeSilveryState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, takesilverystate.o(.text._ZN16TakeSilveryStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TakeSilveryState::TakeSilveryState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2cb]"></a>TakeSilveryState::TakeSilveryState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, takesilverystate.o(.text._ZN16TakeSilveryStateC2EPP5State), UNUSED)

<P><STRONG><a name="[24b]"></a>VisionRecvStruct::VisionRecvStruct__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZN16VisionRecvStructC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VisionRecvStruct::VisionRecvStruct__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::Vision__sub_object()
</UL>

<P><STRONG><a name="[24c]"></a>VisionSendStruct::VisionSendStruct__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZN16VisionSendStructC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VisionSendStruct::VisionSendStruct__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::Vision__sub_object()
</UL>

<P><STRONG><a name="[20a]"></a>Kf::KalmanFilter(double, double, double, unsigned char)</STRONG> (Thumb, 296 bytes, Stack size 136 bytes, filter.o(.text._ZN2Kf12KalmanFilterEdddh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::teachDataUpdate()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::deltaDataUpdate()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
</UL>

<P><STRONG><a name="[20b]"></a>Air::SendDataUpdate()</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, air.o(.text._ZN3Air14SendDataUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Air::SendDataUpdate() &rArr; Gugu::update() &rArr; _ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air::Stop()
</UL>

<P><STRONG><a name="[20d]"></a>Air::Stop()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, air.o(.text._ZN3Air4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Air::Stop() &rArr; Air::SendDataUpdate() &rArr; Gugu::update() &rArr; _ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air::SendDataUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::disforceHandle()
</UL>

<P><STRONG><a name="[20e]"></a>Air::Air()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, air.o(.text._ZN3AirC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Air::Air() &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[2cc]"></a>Air::Air__sub_object()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, air.o(.text._ZN3AirC2Ev), UNUSED)

<P><STRONG><a name="[20f]"></a>Asr::clear()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, asr.o(.text._ZN3Asr5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Asr::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::Asr()
</UL>

<P><STRONG><a name="[210]"></a>Asr::setTar(float, float, float)</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, asr.o(.text._ZN3Asr6setTarEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Asr::setTar(float, float, float) &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
</UL>

<P><STRONG><a name="[211]"></a>Asr::update()</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, asr.o(.text._ZN3Asr6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Asr::update() &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
</UL>

<P><STRONG><a name="[212]"></a>Asr::Asr()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, asr.o(.text._ZN3AsrC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Asr::Asr() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
</UL>

<P><STRONG><a name="[2cd]"></a>Asr::Asr__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, asr.o(.text._ZN3AsrC2Ev), UNUSED)

<P><STRONG><a name="[19f]"></a>Can::disforceHandle()</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, fdcan.o(.text._ZN3Can14disforceHandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Can::disforceHandle() &rArr; DmMotor::mitCtrl(float, float, float, float, float) &rArr; DmMotor::float_to_uint(float, float, float, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air::Stop()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorPowerOut(float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::mitCtrl(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[185]"></a>Can::init(FDCAN_HandleTypeDef*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fdcan.o(.text._ZN3Can4initEP19FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Can::init(FDCAN_HandleTypeDef*) &rArr; MX_FDCAN2_Init() &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[1a0]"></a>Can::sendMsg()</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, fdcan.o(.text._ZN3Can7sendMsgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Can::sendMsg() &rArr; self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*) &rArr; SelfCanFIFO::push(MyCanTxStruct) &rArr; SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[219]"></a>Led::ctrl(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, led.o(.text._ZN3Led4ctrlEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led::ctrl(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
</UL>

<P><STRONG><a name="[215]"></a>Led::init(unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, led.o(.text._ZN3Led4initEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Led::init(unsigned short) &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB2_GRP1_EnableClockj
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22LL_GPIO_ResetOutputPinP12GPIO_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask::init()
</UL>

<P><STRONG><a name="[218]"></a>Led::show(unsigned char)</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, led.o(.text._ZN3Led4showEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led::show(unsigned char) &rArr; Led::ctrl(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::ctrl(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask::run()
</UL>

<P><STRONG><a name="[21d]"></a>Pid::paramCheck(unsigned char)</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, pid.o(.text._ZN3Pid10paramCheckEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pid::paramCheck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::calculate(unsigned char)
</UL>

<P><STRONG><a name="[21a]"></a>Pid::clear()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pid.o(.text._ZN3Pid5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::calculate(unsigned char)
</UL>

<P><STRONG><a name="[21b]"></a>Pid::setPlan(int, PidParam*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pid.o(.text._ZN3Pid7setPlanEiP8PidParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setPlan(int, unsigned char, PidParam*)
</UL>

<P><STRONG><a name="[233]"></a>Pid::setParam(int, float, float, float, float, float)</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, pid.o(.text._ZN3Pid8setParamEifffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Pid::setParam(int, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setParam(int, unsigned char, float, float, float, float, float)
</UL>

<P><STRONG><a name="[21c]"></a>Pid::calculate(unsigned char)</STRONG> (Thumb, 1554 bytes, Stack size 80 bytes, pid.o(.text._ZN3Pid9calculateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pid::calculate(unsigned char) &rArr; Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::clear()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::paramCheck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(float)
</UL>

<P><STRONG><a name="[21e]"></a>Pid::Pid()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pid.o(.text._ZN3PidC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Pid::Pid() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[2ce]"></a>Pid::Pid__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pid.o(.text._ZN3PidC2Ev), UNUSED)

<P><STRONG><a name="[184]"></a>Gugu::init()</STRONG> (Thumb, 348 bytes, Stack size 144 bytes, gugu.o(.text._ZN4Gugu4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Gugu::init() &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29LL_TIM_DisableMasterSlaveModeP11TIM_TypeDef
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_APB1_GRP1_EnableClockj
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB2_GRP1_EnableClockj
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_SetTriggerOutputP11TIM_TypeDefj
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_OC_SetCompareCH1P11TIM_TypeDefj
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_OC_EnablePreloadP11TIM_TypeDefj
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_EnableARRPreloadP11TIM_TypeDef
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_CC_EnableChannelP11TIM_TypeDefj
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_TIM_SetClockSourceP11TIM_TypeDefj
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_TIM_OC_DisableFastP11TIM_TypeDefj
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_TIM_EnableCounterP11TIM_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[20c]"></a>Gugu::update()</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, gugu.o(.text._ZN4Gugu6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gugu::update() &rArr; _ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL23LL_TIM_OC_SetCompareCH1P11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air::SendDataUpdate()
</UL>

<P><STRONG><a name="[22b]"></a>Iwdg::feed()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, iwdg.o(.text._ZN4Iwdg4feedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Iwdg::feed() &rArr; _ZL21LL_IWDG_ReloadCounterP12IWDG_TypeDef
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_IWDG_ReloadCounterP12IWDG_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask::run()
</UL>

<P><STRONG><a name="[18e]"></a>Cycle::getCycleT()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cycle.o(.text._ZN5Cycle9getCycleTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::calculate(unsigned char)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::clear()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateAngleHandle(JointAngle)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::clear()
</UL>

<P><STRONG><a name="[1f7]"></a>Cycle::Cycle__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, devlist.o(.text._ZN5CycleC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPlan::PathPlan__sub_object()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::Wrist(Motor*, Motor*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeVar::TimeVar__sub_object()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::Asr()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::CanInfo::CanInfo__sub_object()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleMotor::DoubleMotor(Motor*, Motor*, signed char)
</UL>

<P><STRONG><a name="[186]"></a>Motor::canMsgInit()</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, motor.o(.text._ZN5Motor10canMsgInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::canMsgInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[22d]"></a>Motor::ctrlCurrent(float)</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, motor.o(.text._ZN5Motor11ctrlCurrentEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Motor::ctrlCurrent(float) &rArr; Motor::motorPowerOut(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::overHeatProtect(short)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorPowerOut(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float)
</UL>

<P><STRONG><a name="[1d5]"></a>Motor::getPosition()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motor.o(.text._ZN5Motor11getPositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::getPosition()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[1f1]"></a>Motor::ctrlPosition(float)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, motor.o(.text._ZN5Motor12ctrlPositionEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Motor::ctrlPosition(float) &rArr; Motor::ctrlSpeed(float) &rArr; Pid::calculate(unsigned char) &rArr; Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::calculate(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::update()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::ctrlPosition(float, float)
</UL>

<P><STRONG><a name="[213]"></a>Motor::motorPowerOut(float)</STRONG> (Thumb, 312 bytes, Stack size 28 bytes, motor.o(.text._ZN5Motor13motorPowerOutEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor::motorPowerOut(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::disforceHandle()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float)
</UL>

<P><STRONG><a name="[22e]"></a>Motor::overHeatProtect(short)</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, motor.o(.text._ZN5Motor15overHeatProtectEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Motor::overHeatProtect(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float)
</UL>

<P><STRONG><a name="[230]"></a>Motor::CanInfo::CanInfo__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, motor.o(.text._ZN5Motor7CanInfoC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor::CanInfo::CanInfo__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[231]"></a>Motor::setPlan(int, unsigned char, PidParam*)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, motor.o(.text._ZN5Motor7setPlanEihP8PidParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlan(int, PidParam*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::init()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::loadParam()
</UL>

<P><STRONG><a name="[232]"></a>Motor::setParam(int, unsigned char, float, float, float, float, float)</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, motor.o(.text._ZN5Motor8setParamEihfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Motor::setParam(int, unsigned char, float, float, float, float, float) &rArr; Pid::setParam(int, float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setParam(int, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::init()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::loadParam()
</UL>

<P><STRONG><a name="[e9]"></a>Motor::canHandle(unsigned char*)</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, motor.o(.text._ZN5Motor9canHandleEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Motor::canHandle(unsigned char*) &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::update()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canOffset(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[234]"></a>Motor::canOffset(unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, motor.o(.text._ZN5Motor9canOffsetEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor::canOffset(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
</UL>

<P><STRONG><a name="[22f]"></a>Motor::ctrlSpeed(float)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, motor.o(.text._ZN5Motor9ctrlSpeedEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Motor::ctrlSpeed(float) &rArr; Pid::calculate(unsigned char) &rArr; Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::calculate(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(float)
</UL>

<P><STRONG><a name="[236]"></a>Motor::motorInit()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor9motorInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::motorInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[235]"></a>Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, motor.o(.text._ZN5MotorC2E9MotorTypeP19FDCAN_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned) &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::VarCale(unsigned char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorInit()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::CanInfo::CanInfo__sub_object()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal__sub_object()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
</UL>

<P><STRONG><a name="[2cf]"></a>Motor::Motor__sub_object(MotorType, FDCAN_HandleTypeDef*, unsigned)</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, motor.o(.text._ZN5MotorC2E9MotorTypeP19FDCAN_HandleTypeDefj), UNUSED)

<P><STRONG><a name="[24f]"></a>Speed::operator =(Speed)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chassis.o(.text._ZN5SpeedaSES_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Speed::operator =(Speed)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
</UL>

<P><STRONG><a name="[88]"></a>State::exit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, offsetstatemachine.o(.text._ZN5State4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = State::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> offsetstatemachine.o(.rodata._ZTV5State)
</UL>
<P><STRONG><a name="[87]"></a>State::update()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, offsetstatemachine.o(.text._ZN5State6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = State::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> offsetstatemachine.o(.rodata._ZTV5State)
</UL>
<P><STRONG><a name="[1c6]"></a>State::convertTo(State*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, statemachine.o(.text._ZN5State9convertToEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = State::convertTo(State*)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeInitState::TakeInitState(State**)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeInitState::update()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetState::OffsetState(State**)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFloorState::update()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeSilveryState::update()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeGoldState::update()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandModeState::update()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeState::update()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState::update()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidState::update()
</UL>

<P><STRONG><a name="[1c8]"></a>State::State__sub_object(State**)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, offsetstatemachine.o(.text._ZN5StateC2EPPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPerfectState::ExitPerfectState(State**)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeInitState::TakeInitState(State**)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetState::OffsetState(State**)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFloorState::TakeFloorState(State**)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeSilveryState::TakeSilveryState(State**)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeGoldState::TakeGoldState(State**)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandModeState::HandModeState(State**)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeState::ExchangeState(State**)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState::CheckState(State**)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidState::HidState(State**)
</UL>

<P><STRONG><a name="[1f2]"></a>Wrist::ctrlPosition(float, float)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, wrist.o(.text._ZN5Wrist12ctrlPositionEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Wrist::ctrlPosition(float, float) &rArr; Motor::ctrlPosition(float) &rArr; Motor::ctrlSpeed(float) &rArr; Pid::calculate(unsigned char) &rArr; Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[1d6]"></a>Wrist::getRollAngle()</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, wrist.o(.text._ZN5Wrist12getRollAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wrist::getRollAngle()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateAngleHandle(JointAngle)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[1d4]"></a>Wrist::getPitchAngle()</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, wrist.o(.text._ZN5Wrist13getPitchAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wrist::getPitchAngle()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateAngleHandle(JointAngle)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[237]"></a>Wrist::Wrist(Motor*, Motor*)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, wrist.o(.text._ZN5WristC2EP5MotorS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Wrist::Wrist(Motor*, Motor*) &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::VarCale(unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleMotor::DoubleMotor__sub_object(Motor*, Motor*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
</UL>

<P><STRONG><a name="[2d0]"></a>Wrist::Wrist__sub_object(Motor*, Motor*)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, wrist.o(.text._ZN5WristC2EP5MotorS1_), UNUSED)

<P><STRONG><a name="[1ca]"></a>Gimbal::init()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gimbal.o(.text._ZN6Gimbal4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Gimbal::init() &rArr; Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setParam(int, unsigned char, float, float, float, float, float)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setPlan(int, unsigned char, PidParam*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalTask::init()
</UL>

<P><STRONG><a name="[1c9]"></a>Gimbal::update()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gimbal.o(.text._ZN6Gimbal6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Gimbal::update() &rArr; Motor::ctrlPosition(float) &rArr; Motor::ctrlSpeed(float) &rArr; Pid::calculate(unsigned char) &rArr; Pid::clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalTask::run()
</UL>

<P><STRONG><a name="[239]"></a>Gimbal::Gimbal__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, devlist.o(.text._ZN6GimbalC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Gimbal::Gimbal__sub_object() &rArr; Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned) &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[1a1]"></a>Online::check()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, online.o(.text._ZN6Online5checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Online::check()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::run()
</UL>

<P><STRONG><a name="[cf]"></a>Online::update()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, online.o(.text._ZN6Online6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Online::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::canHandle(unsigned char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::canHandle(unsigned char*)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>Online::isOnline()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, schedule.o(.text._ZN6Online8isOnlineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Online::isOnline()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::motionDetect()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>

<P><STRONG><a name="[190]"></a>Online::isOffLine()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, schedule.o(.text._ZN6Online9isOffLineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Online::isOffLine()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::taskSchedule()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_50Hz()
</UL>

<P><STRONG><a name="[1eb]"></a>Online::Online()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, online.o(.text._ZN6OnlineC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::RemoteCtrl__sub_object()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::Judgement()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::Vision__sub_object()
</UL>

<P><STRONG><a name="[2d1]"></a>Online::Online__sub_object()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, online.o(.text._ZN6OnlineC2Ev), UNUSED)

<P><STRONG><a name="[23a]"></a>OreBin::OreBin(unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, orebin.o(.text._ZN6OreBinC2Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OreBin::OreBin(unsigned char) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2d2]"></a>OreBin::OreBin__sub_object(unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, orebin.o(.text._ZN6OreBinC2Eh), UNUSED)

<P><STRONG><a name="[189]"></a>Vision::init()</STRONG> (Thumb, 486 bytes, Stack size 192 bytes, vision.o(.text._ZN6Vision4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Vision::init() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26__NVIC_GetPriorityGroupingv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_APB2_GRP1_EnableClockj
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB2_GRP1_EnableClockj
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB1_GRP1_EnableClockj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_USART_DisableFIFOP13USART_TypeDef
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19NVIC_EncodePriorityjjj
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LL_USART_EnableP13USART_TypeDef
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[24a]"></a>Vision::Vision__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vision.o(.text._ZN6VisionC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Vision::Vision__sub_object() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VisionSendStruct::VisionSendStruct__sub_object()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VisionRecvStruct::VisionRecvStruct__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[24e]"></a>Chassis::getNowIndex(unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, chassis.o(.text._ZN7Chassis11getNowIndexEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chassis::getNowIndex(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
</UL>

<P><STRONG><a name="[251]"></a>Chassis::takeOreUpdate(Speed*)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, chassis.o(.text._ZN7Chassis13takeOreUpdateEP5Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chassis::takeOreUpdate(Speed*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>

<P><STRONG><a name="[24d]"></a>Chassis::keyboardUpdate(Speed*)</STRONG> (Thumb, 2256 bytes, Stack size 176 bytes, chassis.o(.text._ZN7Chassis14keyboardUpdateEP5Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Chassis::keyboardUpdate(Speed*) &rArr; Asr::setTar(float, float, float) &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::getNowIndex(unsigned char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed::operator =(Speed)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>

<P><STRONG><a name="[252]"></a>Chassis::visionSpeedUpdate(Speed*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chassis.o(.text._ZN7Chassis17visionSpeedUpdateEP5Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chassis::visionSpeedUpdate(Speed*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>

<P><STRONG><a name="[253]"></a>Chassis::calcRealWheelSpeed(Speed*)</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, chassis.o(.text._ZN7Chassis18calcRealWheelSpeedEP5Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chassis::calcRealWheelSpeed(Speed*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>

<P><STRONG><a name="[250]"></a>Chassis::remoteControlUpdate(Speed*)</STRONG> (Thumb, 532 bytes, Stack size 88 bytes, chassis.o(.text._ZN7Chassis19remoteControlUpdateEP5Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Chassis::remoteControlUpdate(Speed*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update()
</UL>

<P><STRONG><a name="[1f8]"></a>Chassis::update()</STRONG> (Thumb, 820 bytes, Stack size 56 bytes, chassis.o(.text._ZN7Chassis6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Chassis::update() &rArr; Chassis::keyboardUpdate(Speed*) &rArr; Asr::setTar(float, float, float) &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::isOnline()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::remoteControlUpdate(Speed*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::calcRealWheelSpeed(Speed*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::visionSpeedUpdate(Speed*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::keyboardUpdate(Speed*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::takeOreUpdate(Speed*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask::run()
</UL>

<P><STRONG><a name="[254]"></a>Chassis::loadParam()</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, chassis.o(.text._ZN7Chassis9loadParamEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Chassis::loadParam() &rArr; Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setParam(int, unsigned char, float, float, float, float, float)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setPlan(int, unsigned char, PidParam*)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
</UL>

<P><STRONG><a name="[255]"></a>Chassis::Chassis()</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, chassis.o(.text._ZN7ChassisC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Chassis::Chassis() &rArr; Chassis::loadParam() &rArr; Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::loadParam()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::Asr()
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2d3]"></a>Chassis::Chassis__sub_object()</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, chassis.o(.text._ZN7ChassisC2Ev), UNUSED)

<P><STRONG><a name="[1d0]"></a>DmMotor::getPosition()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, dmmotor.o(.text._ZN7DmMotor11getPositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DmMotor::getPosition()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::CalculateAngleHandle(JointAngle)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[256]"></a>DmMotor::motorEnable()</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, dmmotor.o(.text._ZN7DmMotor11motorEnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DmMotor::motorEnable() &rArr; self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*) &rArr; SelfCanFIFO::push(MyCanTxStruct) &rArr; SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateTask::enableCallBack()
</UL>

<P><STRONG><a name="[1f0]"></a>DmMotor::ctrlPosition(float, float)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, dmmotor.o(.text._ZN7DmMotor12ctrlPositionEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DmMotor::ctrlPosition(float, float) &rArr; DmMotor::mitCtrl(float, float, float, float, float) &rArr; DmMotor::float_to_uint(float, float, float, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::mitCtrl(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[257]"></a>DmMotor::float_to_uint(float, float, float, int)</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, dmmotor.o(.text._ZN7DmMotor13float_to_uintEfffi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DmMotor::float_to_uint(float, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::mitCtrl(float, float, float, float, float)
</UL>

<P><STRONG><a name="[258]"></a>DmMotor::uint_to_float(int, float, float, int)</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, dmmotor.o(.text._ZN7DmMotor13uint_to_floatEiffi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DmMotor::uint_to_float(int, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::canHandle(unsigned char*)
</UL>

<P><STRONG><a name="[214]"></a>DmMotor::mitCtrl(float, float, float, float, float)</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, dmmotor.o(.text._ZN7DmMotor7mitCtrlEfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DmMotor::mitCtrl(float, float, float, float, float) &rArr; DmMotor::float_to_uint(float, float, float, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::float_to_uint(float, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::disforceHandle()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::ctrlPosition(float, float)
</UL>

<P><STRONG><a name="[1c1]"></a>DmMotor::setPlan(int, _MitParam*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dmmotor.o(.text._ZN7DmMotor7setPlanEiP9_MitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DmMotor::setPlan(int, _MitParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParam()
</UL>

<P><STRONG><a name="[1c2]"></a>DmMotor::setParam(int, float, float, float, float, float)</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, dmmotor.o(.text._ZN7DmMotor8setParamEifffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DmMotor::setParam(int, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParam()
</UL>

<P><STRONG><a name="[ea]"></a>DmMotor::canHandle(unsigned char*)</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, dmmotor.o(.text._ZN7DmMotor9canHandleEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DmMotor::canHandle(unsigned char*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::update()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::uint_to_float(int, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[259]"></a>DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, dmmotor.o(.text._ZN7DmMotorC2EP19FDCAN_HandleTypeDefht))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short) &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::VarCale(unsigned char)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[2d4]"></a>DmMotor::DmMotor__sub_object(FDCAN_HandleTypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, dmmotor.o(.text._ZN7DmMotorC2EP19FDCAN_HandleTypeDefht), UNUSED)

<P><STRONG><a name="[8a]"></a>LedTask::run()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ledtask.o(.text._ZN7LedTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LedTask::run() &rArr; Led::show(unsigned char) &rArr; Led::ctrl(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg::feed()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledtask.o(.rodata._ZTV7LedTask)
</UL>
<P><STRONG><a name="[89]"></a>LedTask::init()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ledtask.o(.text._ZN7LedTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LedTask::init() &rArr; Led::init(unsigned short) &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init(unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::setAlwaysRun(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledtask.o(.rodata._ZTV7LedTask)
</UL>
<P><STRONG><a name="[25c]"></a>LedTask::LedTask__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ledtask.o(.text._ZN7LedTaskC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LedTask::LedTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[25d]"></a>TimeVar::TimeVar__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, smuniversal.o(.text._ZN7TimeVarC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimeVar::TimeVar__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarCale::VarCale(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1c0]"></a>VarCale::clear()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, varcalt.o(.text._ZN7VarCale5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VarCale::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSM(StateMachine*)
</UL>

<P><STRONG><a name="[1fb]"></a>VarCale::VarCale(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, varcalt.o(.text._ZN7VarCaleC2Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VarCale::VarCale(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::Wrist(Motor*, Motor*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeVar::TimeVar__sub_object()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleMotor::DoubleMotor(Motor*, Motor*, signed char)
</UL>

<P><STRONG><a name="[2d5]"></a>VarCale::VarCale__sub_object(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, varcalt.o(.text._ZN7VarCaleC2Eh), UNUSED)

<P><STRONG><a name="[1ef]"></a>Dynamics::GetJointTorque(JointState, EndForce)</STRONG> (Thumb, 8672 bytes, Stack size 1736 bytes, dynamics.o(.text._ZN8Dynamics14GetJointTorqueE10JointState8EndForce))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = Dynamics::GetJointTorque(JointState, EndForce) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointTorque::JointTorque__sub_object()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[1f5]"></a>Dynamics::Dynamics()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, dynamics.o(.text._ZN8DynamicsC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Dynamics::Dynamics()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2d6]"></a>Dynamics::Dynamics__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, dynamics.o(.text._ZN8DynamicsC2Ev), UNUSED)

<P><STRONG><a name="[28f]"></a>EndForce::EndForce__sub_object(float, float, float)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, devlist.o(.text._ZN8EndForceC2Efff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EndForce::EndForce__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
</UL>

<P><STRONG><a name="[1bc]"></a>EndForce::EndForce__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, devlist.o(.text._ZN8EndForceC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EndForce::EndForce__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
</UL>

<P><STRONG><a name="[1ec]"></a>EndPoint::EndPoint__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, devlist.o(.text._ZN8EndPointC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::ctrlPosition(JointState, EndForce, unsigned char)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
</UL>

<P><STRONG><a name="[1f6]"></a>EndState::EndState__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, arm.o(.text._ZN8EndStateC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EndState::EndState__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
</UL>

<P><STRONG><a name="[8c]"></a>HidState::exit()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hidarmorstate.o(.text._ZN8HidState4exitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HidState::exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidarmorstate.o(.rodata._ZTV8HidState)
</UL>
<P><STRONG><a name="[8b]"></a>HidState::update()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hidarmorstate.o(.text._ZN8HidState6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HidState::update() &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::convertTo(State*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidarmorstate.o(.rodata._ZTV8HidState)
</UL>
<P><STRONG><a name="[25f]"></a>HidState::HidState(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hidarmorstate.o(.text._ZN8HidStateC2EPP5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HidState::HidState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State__sub_object(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2d7]"></a>HidState::HidState__sub_object(State**)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hidarmorstate.o(.text._ZN8HidStateC2EPP5State), UNUSED)

<P><STRONG><a name="[260]"></a>PathPlan::PathPlan__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, devlist.o(.text._ZN8PathPlanC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PathPlan::PathPlan__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
</UL>

<P><STRONG><a name="[261]"></a>ImageTran::deltaDataUpdate()</STRONG> (Thumb, 576 bytes, Stack size 168 bytes, imagetran.o(.text._ZN9ImageTran15deltaDataUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ImageTran::deltaDataUpdate() &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::CtrlerDataUpdate()
</UL>

<P><STRONG><a name="[262]"></a>ImageTran::teachDataUpdate()</STRONG> (Thumb, 776 bytes, Stack size 192 bytes, imagetran.o(.text._ZN9ImageTran15teachDataUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ImageTran::teachDataUpdate() &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kf::KalmanFilter(double, double, double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::CtrlerDataUpdate()
</UL>

<P><STRONG><a name="[263]"></a>ImageTran::CtrlerDataUpdate()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, imagetran.o(.text._ZN9ImageTran16CtrlerDataUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ImageTran::CtrlerDataUpdate() &rArr; ImageTran::teachDataUpdate() &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::teachDataUpdate()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::deltaDataUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::run()
</UL>

<P><STRONG><a name="[eb]"></a>ImageTran::canHandle(MyCanRxStruct*)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, imagetran.o(.text._ZN9ImageTran9canHandleEP13MyCanRxStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ImageTran::canHandle(MyCanRxStruct*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[264]"></a>JudgeCtrl::updateFirstLoadUi()</STRONG> (Thumb, 738 bytes, Stack size 56 bytes, judge.o(.text._ZN9JudgeCtrl17updateFirstLoadUiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = JudgeCtrl::updateFirstLoadUi() &rArr; Judgement::characterDraw() &rArr; Judgement::customSend(unsigned char) &rArr; Judgement::usart3SendBytes(void*, unsigned char) &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::characterDraw()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::graphicDraw(unsigned char)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::run()
</UL>

<P><STRONG><a name="[268]"></a>JudgeCtrl::update()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, judge.o(.text._ZN9JudgeCtrl6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = JudgeCtrl::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::run()
</UL>

<P><STRONG><a name="[269]"></a>JudgeCtrl::reLoadUi()</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, judge.o(.text._ZN9JudgeCtrl8reLoadUiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = JudgeCtrl::reLoadUi()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::run()
</UL>

<P><STRONG><a name="[8e]"></a>JudgeTask::run()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, judgetask.o(.text._ZN9JudgeTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = JudgeTask::run() &rArr; ImageTran::CtrlerDataUpdate() &rArr; ImageTran::teachDataUpdate() &rArr; Kf::KalmanFilter(double, double, double, unsigned char) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::check()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCtrl::reLoadUi()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCtrl::update()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCtrl::updateFirstLoadUi()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTran::CtrlerDataUpdate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judgetask.o(.rodata._ZTV9JudgeTask)
</UL>
<P><STRONG><a name="[8d]"></a>JudgeTask::init()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, judgetask.o(.text._ZN9JudgeTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = JudgeTask::init() &rArr; Judgement::init() &rArr; Judgement::usart3Config() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::setAlwaysRun(bool)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judgetask.o(.rodata._ZTV9JudgeTask)
</UL>
<P><STRONG><a name="[26b]"></a>JudgeTask::JudgeTask__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, judgetask.o(.text._ZN9JudgeTaskC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = JudgeTask::JudgeTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[26c]"></a>Judgement::customSend(unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, judgement.o(.text._ZN9Judgement10customSendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Judgement::customSend(unsigned char) &rArr; Judgement::usart3SendBytes(void*, unsigned char) &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::IdToMate(unsigned short)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ClientId()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::characterDraw()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::graphicDraw(unsigned char)
</UL>

<P><STRONG><a name="[265]"></a>Judgement::graphicDraw(unsigned char)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, judgement.o(.text._ZN9Judgement11graphicDrawEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Judgement::graphicDraw(unsigned char) &rArr; Judgement::customSend(unsigned char) &rArr; Judgement::usart3SendBytes(void*, unsigned char) &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ClientId()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCtrl::updateFirstLoadUi()
</UL>

<P><STRONG><a name="[d0]"></a>Judgement::addFullCount()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, judgement.o(.text._ZN9Judgement12addFullCountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judgement::addFullCount()
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[270]"></a>Judgement::getJudgeData()</STRONG> (Thumb, 568 bytes, Stack size 48 bytes, judgement.o(.text._ZN9Judgement12getJudgeDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Judgement::getJudgeData() &rArr; Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getLength(Judgement::FrameHeader*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>

<P><STRONG><a name="[273]"></a>Judgement::usart3Config()</STRONG> (Thumb, 396 bytes, Stack size 176 bytes, judgement.o(.text._ZN9Judgement12usart3ConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Judgement::usart3Config() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26__NVIC_GetPriorityGroupingv
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_APB1_GRP1_EnableClockj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB2_GRP1_EnableClockj
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24LL_AHB1_GRP1_EnableClockj
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_USART_DisableFIFOP13USART_TypeDef
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19NVIC_EncodePriorityjjj
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18LL_DMA_EnableIT_TCP11DMA_TypeDefj
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15LL_USART_EnableP13USART_TypeDef
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::init()
</UL>

<P><STRONG><a name="[266]"></a>Judgement::characterDraw()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, judgement.o(.text._ZN9Judgement13characterDrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Judgement::characterDraw() &rArr; Judgement::customSend(unsigned char) &rArr; Judgement::usart3SendBytes(void*, unsigned char) &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ClientId()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCtrl::updateFirstLoadUi()
</UL>

<P><STRONG><a name="[26f]"></a>Judgement::usart3SendBytes(void*, unsigned char)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, judgement.o(.text._ZN9Judgement15usart3SendBytesEPvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Judgement::usart3SendBytes(void*, unsigned char) &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26__NVIC_GetPriorityGroupingv
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21LL_DMA_DisableChannelP11DMA_TypeDefj
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_ClearFlag_TC5P11DMA_TypeDef
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19NVIC_EncodePriorityjjj
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19LL_DMA_DisableIT_TCP11DMA_TypeDefj
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>

<P><STRONG><a name="[26a]"></a>Judgement::init()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, judgement.o(.text._ZN9Judgement4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Judgement::init() &rArr; Judgement::usart3Config() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::init()
</UL>

<P><STRONG><a name="[26d]"></a>Judgement::ClientId()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, judgement.o(.text._ZN9Judgement8ClientIdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judgement::ClientId()
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::characterDraw()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::graphicDraw(unsigned char)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>

<P><STRONG><a name="[287]"></a>Judgement::IdToMate(RobotIdDef)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, judgement.o(.text._ZN9Judgement8IdToMateE10RobotIdDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Judgement::IdToMate(RobotIdDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::IdToMate(unsigned short)
</UL>

<P><STRONG><a name="[26e]"></a>Judgement::IdToMate(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, judgement.o(.text._ZN9Judgement8IdToMateEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Judgement::IdToMate(unsigned short) &rArr; Judgement::IdToMate(RobotIdDef)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::IdToMate(RobotIdDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::customSend(unsigned char)
</UL>

<P><STRONG><a name="[271]"></a>Judgement::getLength(Judgement::FrameHeader*)</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, judgement.o(.text._ZN9Judgement9getLengthEPNS_11FrameHeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getJudgeData()
</UL>

<P><STRONG><a name="[267]"></a>Judgement::ringQueue()</STRONG> (Thumb, 1438 bytes, Stack size 48 bytes, judgement.o(.text._ZN9Judgement9ringQueueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Judgement::ringQueue() &rArr; Judgement::getJudgeData() &rArr; Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getLength(Judgement::FrameHeader*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getJudgeData()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::run()
</UL>

<P><STRONG><a name="[289]"></a>Judgement::Judgement()</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, judgement.o(.text._ZN9JudgementC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Judgement::Judgement() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[2d8]"></a>Judgement::Judgement__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, judgement.o(.text._ZN9JudgementC2Ev), UNUSED)

<P><STRONG><a name="[28e]"></a>MechParam::MechParam__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, arm.o(.text._ZN9MechParamC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MechParam::MechParam__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[90]"></a>StateTask::enableCallBack()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, statetask.o(.text._ZN9StateTask14enableCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = StateTask::enableCallBack() &rArr; DmMotor::motorEnable() &rArr; self_CAN_Transmit(FDCAN_HandleTypeDef*, MyCanTxStruct*) &rArr; SelfCanFIFO::push(MyCanTxStruct) &rArr; SelfCanFIFO::trySend() &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::motorEnable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statetask.o(.rodata._ZTV9StateTask)
</UL>
<P><STRONG><a name="[91]"></a>StateTask::disableCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, statetask.o(.text._ZN9StateTask15disableCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateTask::disableCallBack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statetask.o(.rodata._ZTV9StateTask)
</UL>
<P><STRONG><a name="[8f]"></a>StateTask::rcUpdateCallBack()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, statetask.o(.text._ZN9StateTask16rcUpdateCallBackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StateTask::rcUpdateCallBack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statetask.o(.rodata._ZTV9StateTask)
</UL>
<P><STRONG><a name="[93]"></a>StateTask::run()</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, statetask.o(.text._ZN9StateTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = StateTask::run() &rArr; loadParam() &rArr; DmMotor::setPlan(int, _MitParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParam()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statetask.o(.rodata._ZTV9StateTask)
</UL>
<P><STRONG><a name="[92]"></a>StateTask::init()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, statetask.o(.text._ZN9StateTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = StateTask::init() &rArr; loadParam() &rArr; DmMotor::setPlan(int, _MitParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParam()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statetask.o(.rodata._ZTV9StateTask)
</UL>
<P><STRONG><a name="[28b]"></a>StateTask::StateTask__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, statetask.o(.text._ZN9StateTaskC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = StateTask::StateTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[28c]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[25a]"></a>operator new(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[78]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> virtualtask.o(.rodata._ZTV11VirtualTask)
</UL>
<P><STRONG><a name="[28d]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[67]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; boardALLInit() &rArr; Vision::init() &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26__NVIC_SetPriorityGroupingj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2a5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[297]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[291]"></a>__aligned_malloc</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, mallocra.o(i.__aligned_malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2a9]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocra.o(i.__free$realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1d1]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[1da]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
</UL>

<P><STRONG><a name="[1cf]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[1d2]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::remoteControlUpdate(Speed*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[18d]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::update()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asr::setTar(float, float, float)
</UL>

<P><STRONG><a name="[18b]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathPlanCalt(PathPlan*, EndPoint, EndPoint, float)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[2d9]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[1d3]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::GetNowParam()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::remoteControlUpdate(Speed*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::GetJointTorque(JointState, EndForce)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::GetJointAngle(EndPoint, unsigned char)
</UL>

<P><STRONG><a name="[1d9]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
</UL>

<P><STRONG><a name="[1d8]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::mat2qua2euler(float(*)[3], float*)
</UL>

<P><STRONG><a name="[2a2]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c4]"></a>malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mallocra.o(i.__malloc$realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::setPlan(int, _MitParam*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OreBin::OreBin(unsigned char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlan(int, PidParam*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[29c]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[29b]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[29d]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a8]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[294]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[299]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[296]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2a7]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[298]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[29a]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1c5]"></a>realloc</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mallocra.o(i.__realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualTask::VirtualTask__sub_object()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::setPlan(int, _MitParam*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Online::Online()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlan(int, PidParam*)
</UL>

<P><STRONG><a name="[2da]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2db]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2dc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[295]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[29f]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[29e]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[293]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a8]"></a>_ZL17LL_RCC_HSE_Enablev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZL17LL_RCC_HSE_Enablev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1ac]"></a>_ZL17LL_RCC_LSI_Enablev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZL17LL_RCC_LSI_Enablev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b0]"></a>_ZL17LL_RCC_PLL_Enablev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZL17LL_RCC_PLL_Enablev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1a9]"></a>_ZL18LL_RCC_HSE_IsReadyv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZL18LL_RCC_HSE_IsReadyv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1ad]"></a>_ZL18LL_RCC_LSI_IsReadyv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZL18LL_RCC_LSI_IsReadyv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b1]"></a>_ZL18LL_RCC_PLL_IsReadyv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZL18LL_RCC_PLL_IsReadyv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1a6]"></a>_ZL19LL_FLASH_GetLatencyv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZL19LL_FLASH_GetLatencyv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1a5]"></a>_ZL19LL_FLASH_SetLatencyj</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL19LL_FLASH_SetLatencyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL19LL_FLASH_SetLatencyj
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1aa]"></a>_ZL19LL_RCC_HSI48_Enablev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZL19LL_RCC_HSI48_Enablev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1ab]"></a>_ZL20LL_RCC_HSI48_IsReadyv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZL20LL_RCC_HSI48_IsReadyv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b4]"></a>_ZL22LL_RCC_GetSysClkSourcev</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZL22LL_RCC_GetSysClkSourcev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b3]"></a>_ZL22LL_RCC_SetAHBPrescalerj</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL22LL_RCC_SetAHBPrescalerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL22LL_RCC_SetAHBPrescalerj
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b2]"></a>_ZL22LL_RCC_SetSysClkSourcej</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL22LL_RCC_SetSysClkSourcej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL22LL_RCC_SetSysClkSourcej
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b5]"></a>_ZL23LL_RCC_SetAPB1Prescalerj</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL23LL_RCC_SetAPB1Prescalerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL23LL_RCC_SetAPB1Prescalerj
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b6]"></a>_ZL23LL_RCC_SetAPB2Prescalerj</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL23LL_RCC_SetAPB2Prescalerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL23LL_RCC_SetAPB2Prescalerj
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b9]"></a>_ZL24LL_RCC_SetUSBClockSourcej</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL24LL_RCC_SetUSBClockSourcej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_RCC_SetUSBClockSourcej
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1b8]"></a>_ZL26LL_RCC_SetFDCANClockSourcej</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text._ZL26LL_RCC_SetFDCANClockSourcej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26LL_RCC_SetFDCANClockSourcej
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1ba]"></a>_ZL26LL_RCC_SetUSARTClockSourcej</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, main.o(.text._ZL26LL_RCC_SetUSARTClockSourcej))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26LL_RCC_SetUSARTClockSourcej
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[290]"></a>_ZL26__NVIC_SetPriorityGroupingj</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, main.o(.text._ZL26__NVIC_SetPriorityGroupingj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL26__NVIC_SetPriorityGroupingj
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>_ZL27LL_RCC_PLL_ConfigDomain_SYSjjjj</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text._ZL27LL_RCC_PLL_ConfigDomain_SYSjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ZL27LL_RCC_PLL_ConfigDomain_SYSjjjj
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1af]"></a>_ZL27LL_RCC_PLL_EnableDomain_SYSv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZL27LL_RCC_PLL_EnableDomain_SYSv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1a7]"></a>_ZL28LL_PWR_EnableRange1BoostModev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZL28LL_PWR_EnableRange1BoostModev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[17e]"></a>_ZL14SysTick_Configj</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board.o(.text._ZL14SysTick_Configj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL14SysTick_Configj &rArr; _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
</UL>

<P><STRONG><a name="[181]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, board.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14SysTick_Configj
</UL>

<P><STRONG><a name="[192]"></a>_ZL18__NVIC_SystemResetv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, board.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softwareReset()
</UL>

<P><STRONG><a name="[180]"></a>_ZL19NVIC_EncodePriorityjjj</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, board.o(.text._ZL19NVIC_EncodePriorityjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ZL19NVIC_EncodePriorityjjj
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
</UL>

<P><STRONG><a name="[17f]"></a>_ZL26__NVIC_GetPriorityGroupingv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(.text._ZL26__NVIC_GetPriorityGroupingv))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
</UL>

<P><STRONG><a name="[94]"></a>_GLOBAL__sub_I_devList.cpp</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, devlist.o(.text._GLOBAL__sub_I_devList.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _GLOBAL__sub_I_devList.cpp &rArr; __cxx_global_var_init &rArr; Chassis::Chassis() &rArr; Chassis::loadParam() &rArr; Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devlist.o(.init_array)
</UL>
<P><STRONG><a name="[14b]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __cxx_global_var_init &rArr; Chassis::Chassis() &rArr; Chassis::loadParam() &rArr; Motor::setPlan(int, unsigned char, PidParam*) &rArr; Pid::setPlan(int, PidParam*) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[14c]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __cxx_global_var_init.1 &rArr; Gimbal::Gimbal__sub_object() &rArr; Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned) &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[155]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init.10 &rArr; Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned) &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[156]"></a>__cxx_global_var_init.11</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.11))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.11 &rArr; PathPlan::PathPlan__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPlan::PathPlan__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[157]"></a>__cxx_global_var_init.12</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.12 &rArr; PathPlan::PathPlan__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPlan::PathPlan__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[158]"></a>__cxx_global_var_init.13</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.13 &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[159]"></a>__cxx_global_var_init.14</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.14 &rArr; JointAngle::JointAngle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointAngle::JointAngle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[15a]"></a>__cxx_global_var_init.15</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.15 &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[15b]"></a>__cxx_global_var_init.16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.16 &rArr; JointTorque::JointTorque__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointTorque::JointTorque__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[15c]"></a>__cxx_global_var_init.17</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.17))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.17 &rArr; JointTorque::JointTorque__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointTorque::JointTorque__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[15d]"></a>__cxx_global_var_init.18</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.18))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.18 &rArr; JointTorque::JointTorque__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointTorque::JointTorque__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[15e]"></a>__cxx_global_var_init.19</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.19))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.19 &rArr; JointState::JointState__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[14d]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __cxx_global_var_init.2 &rArr; Air::Air() &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air::Air()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[15f]"></a>__cxx_global_var_init.20</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.20))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.20 &rArr; JointState::JointState__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[160]"></a>__cxx_global_var_init.21</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.21))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.21 &rArr; JointState::JointState__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[161]"></a>__cxx_global_var_init.22</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.22))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.22 &rArr; JointState::JointState__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JointState::JointState__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[162]"></a>__cxx_global_var_init.23</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.23))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.23 &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[163]"></a>__cxx_global_var_init.24</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.24))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cxx_global_var_init.24 &rArr; EndForce::EndForce__sub_object(float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndForce::EndForce__sub_object(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[14e]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __cxx_global_var_init.3 &rArr; DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short) &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[14f]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __cxx_global_var_init.4 &rArr; DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short) &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[150]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __cxx_global_var_init.5 &rArr; DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short) &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmMotor::DmMotor(FDCAN_HandleTypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[151]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init.6 &rArr; Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned) &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[152]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __cxx_global_var_init.7 &rArr; Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned) &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, FDCAN_HandleTypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[153]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __cxx_global_var_init.8 &rArr; Wrist::Wrist(Motor*, Motor*) &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrist::Wrist(Motor*, Motor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[154]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, devlist.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.9 &rArr; PathPlan::PathPlan__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPlan::PathPlan__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_devList.cpp
</UL>

<P><STRONG><a name="[95]"></a>_GLOBAL__sub_I_ledTask.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ledtask.o(.text._GLOBAL__sub_I_ledTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_ledTask.cpp &rArr; __cxx_global_var_init &rArr; LedTask::LedTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledtask.o(.init_array)
</UL>
<P><STRONG><a name="[170]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ledtask.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; LedTask::LedTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask::LedTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ledTask.cpp
</UL>

<P><STRONG><a name="[96]"></a>_GLOBAL__sub_I_stateTask.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, statetask.o(.text._GLOBAL__sub_I_stateTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_stateTask.cpp &rArr; __cxx_global_var_init &rArr; StateTask::StateTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statetask.o(.init_array)
</UL>
<P><STRONG><a name="[179]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statetask.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; StateTask::StateTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateTask::StateTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_stateTask.cpp
</UL>

<P><STRONG><a name="[97]"></a>_GLOBAL__sub_I_chassisTask.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chassistask.o(.text._GLOBAL__sub_I_chassisTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_chassisTask.cpp &rArr; __cxx_global_var_init &rArr; ChassisTask::ChassisTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassistask.o(.init_array)
</UL>
<P><STRONG><a name="[148]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chassistask.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; ChassisTask::ChassisTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask::ChassisTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_chassisTask.cpp
</UL>

<P><STRONG><a name="[98]"></a>_GLOBAL__sub_I_gimbalTask.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gimbaltask.o(.text._GLOBAL__sub_I_gimbalTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_gimbalTask.cpp &rArr; __cxx_global_var_init &rArr; GimbalTask::GimbalTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbaltask.o(.init_array)
</UL>
<P><STRONG><a name="[167]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gimbaltask.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; GimbalTask::GimbalTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalTask::GimbalTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_gimbalTask.cpp
</UL>

<P><STRONG><a name="[99]"></a>_GLOBAL__sub_I_judgeTask.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, judgetask.o(.text._GLOBAL__sub_I_judgeTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_judgeTask.cpp &rArr; __cxx_global_var_init &rArr; JudgeTask::JudgeTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judgetask.o(.init_array)
</UL>
<P><STRONG><a name="[16d]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, judgetask.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; JudgeTask::JudgeTask__sub_object() &rArr; VirtualTask::VirtualTask__sub_object() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask::JudgeTask__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_judgeTask.cpp
</UL>

<P><STRONG><a name="[9a]"></a>_GLOBAL__sub_I_SMUniversal.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smuniversal.o(.text._GLOBAL__sub_I_SMUniversal.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_SMUniversal.cpp &rArr; __cxx_global_var_init &rArr; TimeVar::TimeVar__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smuniversal.o(.init_array)
</UL>
<P><STRONG><a name="[145]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smuniversal.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init &rArr; TimeVar::TimeVar__sub_object() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeVar::TimeVar__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SMUniversal.cpp
</UL>

<P><STRONG><a name="[9b]"></a>_GLOBAL__sub_I_offsetStateMachine.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, offsetstatemachine.o(.text._GLOBAL__sub_I_offsetStateMachine.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GLOBAL__sub_I_offsetStateMachine.cpp &rArr; __cxx_global_var_init &rArr; StateMachine::StateMachine() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> offsetstatemachine.o(.init_array)
</UL>
<P><STRONG><a name="[172]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, offsetstatemachine.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __cxx_global_var_init &rArr; StateMachine::StateMachine() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_offsetStateMachine.cpp
</UL>

<P><STRONG><a name="[173]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, offsetstatemachine.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.1 &rArr; OffsetState::OffsetState(State**) &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetState::OffsetState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_offsetStateMachine.cpp
</UL>

<P><STRONG><a name="[9c]"></a>_GLOBAL__sub_I_oreMotionStateMachine.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oremotionstatemachine.o(.text._GLOBAL__sub_I_oreMotionStateMachine.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GLOBAL__sub_I_oreMotionStateMachine.cpp &rArr; __cxx_global_var_init &rArr; StateMachine::StateMachine() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oremotionstatemachine.o(.init_array)
</UL>
<P><STRONG><a name="[175]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oremotionstatemachine.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __cxx_global_var_init &rArr; StateMachine::StateMachine() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine::StateMachine()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_oreMotionStateMachine.cpp
</UL>

<P><STRONG><a name="[176]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oremotionstatemachine.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.1 &rArr; TakeInitState::TakeInitState(State**) &rArr; State::convertTo(State*)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeInitState::TakeInitState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_oreMotionStateMachine.cpp
</UL>

<P><STRONG><a name="[177]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oremotionstatemachine.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.2 &rArr; ExitPerfectState::ExitPerfectState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPerfectState::ExitPerfectState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_oreMotionStateMachine.cpp
</UL>

<P><STRONG><a name="[9d]"></a>_GLOBAL__sub_I_takeGoldState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, takegoldstate.o(.text._GLOBAL__sub_I_takeGoldState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_takeGoldState.cpp &rArr; __cxx_global_var_init &rArr; TakeGoldState::TakeGoldState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takegoldstate.o(.init_array)
</UL>
<P><STRONG><a name="[17a]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, takegoldstate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; TakeGoldState::TakeGoldState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeGoldState::TakeGoldState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_takeGoldState.cpp
</UL>

<P><STRONG><a name="[9e]"></a>_GLOBAL__sub_I_takeSilveryState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, takesilverystate.o(.text._GLOBAL__sub_I_takeSilveryState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_takeSilveryState.cpp &rArr; __cxx_global_var_init &rArr; TakeSilveryState::TakeSilveryState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takesilverystate.o(.init_array)
</UL>
<P><STRONG><a name="[17b]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, takesilverystate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; TakeSilveryState::TakeSilveryState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeSilveryState::TakeSilveryState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_takeSilveryState.cpp
</UL>

<P><STRONG><a name="[9f]"></a>_GLOBAL__sub_I_pickOreState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pickorestate.o(.text._GLOBAL__sub_I_pickOreState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_pickOreState.cpp &rArr; __cxx_global_var_init &rArr; TakeFloorState::TakeFloorState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pickorestate.o(.init_array)
</UL>
<P><STRONG><a name="[178]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pickorestate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; TakeFloorState::TakeFloorState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeFloorState::TakeFloorState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_pickOreState.cpp
</UL>

<P><STRONG><a name="[a0]"></a>_GLOBAL__sub_I_exchangeOreState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, exchangeorestate.o(.text._GLOBAL__sub_I_exchangeOreState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_exchangeOreState.cpp &rArr; __cxx_global_var_init &rArr; ExchangeState::ExchangeState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exchangeorestate.o(.init_array)
</UL>
<P><STRONG><a name="[165]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, exchangeorestate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; ExchangeState::ExchangeState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeState::ExchangeState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_exchangeOreState.cpp
</UL>

<P><STRONG><a name="[a1]"></a>_GLOBAL__sub_I_handModeState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, handmodestate.o(.text._GLOBAL__sub_I_handModeState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_handModeState.cpp &rArr; __cxx_global_var_init &rArr; HandModeState::HandModeState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> handmodestate.o(.init_array)
</UL>
<P><STRONG><a name="[168]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, handmodestate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; HandModeState::HandModeState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandModeState::HandModeState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_handModeState.cpp
</UL>

<P><STRONG><a name="[a2]"></a>_GLOBAL__sub_I_hidArmorState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hidarmorstate.o(.text._GLOBAL__sub_I_hidArmorState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_hidArmorState.cpp &rArr; __cxx_global_var_init &rArr; HidState::HidState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hidarmorstate.o(.init_array)
</UL>
<P><STRONG><a name="[169]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hidarmorstate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; HidState::HidState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidState::HidState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_hidArmorState.cpp
</UL>

<P><STRONG><a name="[a3]"></a>_GLOBAL__sub_I_checkOreState.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, checkorestate.o(.text._GLOBAL__sub_I_checkOreState.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_checkOreState.cpp &rArr; __cxx_global_var_init &rArr; CheckState::CheckState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkorestate.o(.init_array)
</UL>
<P><STRONG><a name="[149]"></a>__cxx_global_var_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, checkorestate.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; CheckState::CheckState(State**) &rArr; State::State__sub_object(State**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState::CheckState(State**)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_checkOreState.cpp
</UL>

<P><STRONG><a name="[a4]"></a>_GLOBAL__sub_I_imageTran.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imagetran.o(.text._GLOBAL__sub_I_imageTran.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_imageTran.cpp &rArr; __cxx_global_var_init.2 &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imagetran.o(.init_array)
</UL>
<P><STRONG><a name="[16a]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imagetran.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_imageTran.cpp
</UL>

<P><STRONG><a name="[16b]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imagetran.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.1 &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_imageTran.cpp
</UL>

<P><STRONG><a name="[16c]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imagetran.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.2 &rArr; EndPoint::EndPoint__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPoint::EndPoint__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_imageTran.cpp
</UL>

<P><STRONG><a name="[a5]"></a>_GLOBAL__sub_I_oreBin.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, orebin.o(.text._GLOBAL__sub_I_oreBin.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_oreBin.cpp &rArr; __cxx_global_var_init &rArr; OreBin::OreBin(unsigned char) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> orebin.o(.init_array)
</UL>
<P><STRONG><a name="[174]"></a>__cxx_global_var_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, orebin.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __cxx_global_var_init &rArr; OreBin::OreBin(unsigned char) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OreBin::OreBin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_oreBin.cpp
</UL>

<P><STRONG><a name="[217]"></a>_ZL22LL_GPIO_ResetOutputPinP12GPIO_TypeDefj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(.text._ZL22LL_GPIO_ResetOutputPinP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL22LL_GPIO_ResetOutputPinP12GPIO_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init(unsigned short)
</UL>

<P><STRONG><a name="[216]"></a>_ZL24LL_AHB2_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(.text._ZL24LL_AHB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB2_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init(unsigned short)
</UL>

<P><STRONG><a name="[a6]"></a>_GLOBAL__sub_I_motor.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor.o(.text._GLOBAL__sub_I_motor.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _GLOBAL__sub_I_motor.cpp &rArr; __cxx_global_var_init &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.init_array)
</UL>
<P><STRONG><a name="[171]"></a>__cxx_global_var_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, motor.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __cxx_global_var_init &rArr; CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned) &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg::CanSendMsg(FDCAN_HandleTypeDef*, bool, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_motor.cpp
</UL>

<P><STRONG><a name="[a7]"></a>_GLOBAL__sub_I_dbus.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dbus.o(.text._GLOBAL__sub_I_dbus.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_dbus.cpp &rArr; __cxx_global_var_init &rArr; RemoteCtrl::RemoteCtrl__sub_object() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbus.o(.init_array)
</UL>
<P><STRONG><a name="[1e8]"></a>_ZL15LL_USART_EnableP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dbus.o(.text._ZL15LL_USART_EnableP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL15LL_USART_EnableP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e2]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, dbus.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e1]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dbus.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e0]"></a>_ZL19NVIC_EncodePriorityjjj</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dbus.o(.text._ZL19NVIC_EncodePriorityjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ZL19NVIC_EncodePriorityjjj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[144]"></a>_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, dbus.o(.text._ZL20LL_DMA_EnableChannelP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>_ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dbus.o(.text._ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>_ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dbus.o(.text._ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>_ZL20LL_USART_DisableFIFOP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dbus.o(.text._ZL20LL_USART_DisableFIFOP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL20LL_USART_DisableFIFOP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[140]"></a>_ZL21LL_DMA_DisableChannelP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, dbus.o(.text._ZL21LL_DMA_DisableChannelP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL21LL_DMA_DisableChannelP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>_ZL21LL_USART_ReceiveData8P13USART_TypeDef</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, dbus.o(.text._ZL21LL_USART_ReceiveData8P13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL21LL_USART_ReceiveData8P13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>_ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dbus.o(.text._ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[13d]"></a>_ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, dbus.o(.text._ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>_ZL24LL_AHB1_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dbus.o(.text._ZL24LL_AHB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB1_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1de]"></a>_ZL24LL_AHB2_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dbus.o(.text._ZL24LL_AHB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB2_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1dd]"></a>_ZL24LL_APB1_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dbus.o(.text._ZL24LL_APB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_APB1_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e6]"></a>_ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, dbus.o(.text._ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e7]"></a>_ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, dbus.o(.text._ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[13c]"></a>_ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, dbus.o(.text._ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>_ZL26__NVIC_GetPriorityGroupingv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dbus.o(.text._ZL26__NVIC_GetPriorityGroupingv))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e4]"></a>_ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbus.o(.text._ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[1e3]"></a>_ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbus.o(.text._ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::init()
</UL>

<P><STRONG><a name="[14a]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dbus.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; RemoteCtrl::RemoteCtrl__sub_object() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrl::RemoteCtrl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_dbus.cpp
</UL>

<P><STRONG><a name="[a8]"></a>_GLOBAL__sub_I_judgement.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, judgement.o(.text._GLOBAL__sub_I_judgement.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _GLOBAL__sub_I_judgement.cpp &rArr; __cxx_global_var_init &rArr; Judgement::Judgement() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judgement.o(.init_array)
</UL>
<P><STRONG><a name="[281]"></a>_ZL15LL_USART_EnableP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, judgement.o(.text._ZL15LL_USART_EnableP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL15LL_USART_EnableP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[27a]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, judgement.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[283]"></a>_ZL18LL_DMA_EnableIT_TCP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, judgement.o(.text._ZL18LL_DMA_EnableIT_TCP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL18LL_DMA_EnableIT_TCP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[279]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, judgement.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[284]"></a>_ZL19LL_DMA_DisableIT_TCP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, judgement.o(.text._ZL19LL_DMA_DisableIT_TCP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL19LL_DMA_DisableIT_TCP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
</UL>

<P><STRONG><a name="[278]"></a>_ZL19NVIC_EncodePriorityjjj</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, judgement.o(.text._ZL19NVIC_EncodePriorityjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ZL19NVIC_EncodePriorityjjj
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[d1]"></a>_ZL20LL_DMA_ClearFlag_TC4P11DMA_TypeDef</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, judgement.o(.text._ZL20LL_DMA_ClearFlag_TC4P11DMA_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL20LL_DMA_ClearFlag_TC4P11DMA_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[286]"></a>_ZL20LL_DMA_ClearFlag_TC5P11DMA_TypeDef</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, judgement.o(.text._ZL20LL_DMA_ClearFlag_TC5P11DMA_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL20LL_DMA_ClearFlag_TC5P11DMA_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
</UL>

<P><STRONG><a name="[282]"></a>_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, judgement.o(.text._ZL20LL_DMA_EnableChannelP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[288]"></a>_ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, judgement.o(.text._ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL20LL_DMA_GetDataLengthP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>

<P><STRONG><a name="[27d]"></a>_ZL20LL_USART_DisableFIFOP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, judgement.o(.text._ZL20LL_USART_DisableFIFOP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL20LL_USART_DisableFIFOP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[285]"></a>_ZL21LL_DMA_DisableChannelP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, judgement.o(.text._ZL21LL_DMA_DisableChannelP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL21LL_DMA_DisableChannelP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
</UL>

<P><STRONG><a name="[ce]"></a>_ZL23LL_DMA_IsActiveFlag_TC4P11DMA_TypeDef</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, judgement.o(.text._ZL23LL_DMA_IsActiveFlag_TC4P11DMA_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL23LL_DMA_IsActiveFlag_TC4P11DMA_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[274]"></a>_ZL24LL_AHB1_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, judgement.o(.text._ZL24LL_AHB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB1_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[276]"></a>_ZL24LL_AHB2_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, judgement.o(.text._ZL24LL_AHB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB2_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[275]"></a>_ZL24LL_APB1_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, judgement.o(.text._ZL24LL_APB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_APB1_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[27e]"></a>_ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, judgement.o(.text._ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[280]"></a>_ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, judgement.o(.text._ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[27f]"></a>_ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, judgement.o(.text._ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[277]"></a>_ZL26__NVIC_GetPriorityGroupingv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, judgement.o(.text._ZL26__NVIC_GetPriorityGroupingv))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3SendBytes(void*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[27c]"></a>_ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, judgement.o(.text._ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[27b]"></a>_ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, judgement.o(.text._ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::usart3Config()
</UL>

<P><STRONG><a name="[16e]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, judgement.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __cxx_global_var_init &rArr; Judgement::Judgement() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::Judgement()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_judgement.cpp
</UL>

<P><STRONG><a name="[a9]"></a>_GLOBAL__sub_I_vision.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vision.o(.text._GLOBAL__sub_I_vision.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GLOBAL__sub_I_vision.cpp &rArr; __cxx_global_var_init &rArr; Vision::Vision__sub_object() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vision.o(.init_array)
</UL>
<P><STRONG><a name="[248]"></a>_ZL15LL_USART_EnableP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZL15LL_USART_EnableP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL15LL_USART_EnableP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[241]"></a>_ZL16__NVIC_EnableIRQ9IRQn_Type</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, vision.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL16__NVIC_EnableIRQ9IRQn_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[240]"></a>_ZL18__NVIC_SetPriority9IRQn_Typej</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, vision.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority9IRQn_Typej
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[23f]"></a>_ZL19NVIC_EncodePriorityjjj</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, vision.o(.text._ZL19NVIC_EncodePriorityjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ZL19NVIC_EncodePriorityjjj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[13b]"></a>_ZL20LL_DMA_EnableChannelP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, vision.o(.text._ZL20LL_DMA_EnableChannelP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL20LL_DMA_EnableChannelP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>_ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, vision.o(.text._ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ZL20LL_DMA_SetDataLengthP11DMA_TypeDefjj
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>_ZL20LL_USART_DisableFIFOP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZL20LL_USART_DisableFIFOP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL20LL_USART_DisableFIFOP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[137]"></a>_ZL21LL_DMA_DisableChannelP11DMA_TypeDefj</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, vision.o(.text._ZL21LL_DMA_DisableChannelP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ZL21LL_DMA_DisableChannelP11DMA_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>_ZL21LL_USART_ReceiveData8P13USART_TypeDef</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, vision.o(.text._ZL21LL_USART_ReceiveData8P13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL21LL_USART_ReceiveData8P13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[249]"></a>_ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL22LL_USART_EnableIT_IDLEP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[135]"></a>_ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, vision.o(.text._ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL23LL_USART_ClearFlag_IDLEP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>_ZL24LL_AHB1_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vision.o(.text._ZL24LL_AHB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB1_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[23d]"></a>_ZL24LL_AHB2_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vision.o(.text._ZL24LL_AHB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB2_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[23c]"></a>_ZL24LL_APB2_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vision.o(.text._ZL24LL_APB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_APB2_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[245]"></a>_ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, vision.o(.text._ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_ConfigAsyncModeP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[246]"></a>_ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_EnableDMAReq_RXP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[247]"></a>_ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vision.o(.text._ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL24LL_USART_EnableDMAReq_TXP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[134]"></a>_ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, vision.o(.text._ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL26LL_USART_IsActiveFlag_IDLEP13USART_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[23e]"></a>_ZL26__NVIC_GetPriorityGroupingv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vision.o(.text._ZL26__NVIC_GetPriorityGroupingv))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[243]"></a>_ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vision.o(.text._ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL27LL_USART_SetRXFIFOThresholdP13USART_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[242]"></a>_ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vision.o(.text._ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL27LL_USART_SetTXFIFOThresholdP13USART_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::init()
</UL>

<P><STRONG><a name="[17c]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vision.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __cxx_global_var_init &rArr; Vision::Vision__sub_object() &rArr; Online::Online() &rArr; realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision::Vision__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_vision.cpp
</UL>

<P><STRONG><a name="[228]"></a>_ZL20LL_TIM_EnableCounterP11TIM_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gugu.o(.text._ZL20LL_TIM_EnableCounterP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL20LL_TIM_EnableCounterP11TIM_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[223]"></a>_ZL21LL_TIM_OC_DisableFastP11TIM_TypeDefj</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, gugu.o(.text._ZL21LL_TIM_OC_DisableFastP11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ZL21LL_TIM_OC_DisableFastP11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[221]"></a>_ZL21LL_TIM_SetClockSourceP11TIM_TypeDefj</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gugu.o(.text._ZL21LL_TIM_SetClockSourceP11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL21LL_TIM_SetClockSourceP11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[227]"></a>_ZL23LL_TIM_CC_EnableChannelP11TIM_TypeDefj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gugu.o(.text._ZL23LL_TIM_CC_EnableChannelP11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL23LL_TIM_CC_EnableChannelP11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[220]"></a>_ZL23LL_TIM_EnableARRPreloadP11TIM_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gugu.o(.text._ZL23LL_TIM_EnableARRPreloadP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL23LL_TIM_EnableARRPreloadP11TIM_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[222]"></a>_ZL23LL_TIM_OC_EnablePreloadP11TIM_TypeDefj</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, gugu.o(.text._ZL23LL_TIM_OC_EnablePreloadP11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ZL23LL_TIM_OC_EnablePreloadP11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[229]"></a>_ZL23LL_TIM_OC_SetCompareCH1P11TIM_TypeDefj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gugu.o(.text._ZL23LL_TIM_OC_SetCompareCH1P11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL23LL_TIM_OC_SetCompareCH1P11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::update()
</UL>

<P><STRONG><a name="[22a]"></a>_ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gugu.o(.text._ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL23LL_TIM_OC_SetCompareCH2P11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::update()
</UL>

<P><STRONG><a name="[224]"></a>_ZL23LL_TIM_SetTriggerOutputP11TIM_TypeDefj</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gugu.o(.text._ZL23LL_TIM_SetTriggerOutputP11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL23LL_TIM_SetTriggerOutputP11TIM_TypeDefj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[226]"></a>_ZL24LL_AHB2_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gugu.o(.text._ZL24LL_AHB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_AHB2_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[21f]"></a>_ZL24LL_APB1_GRP1_EnableClockj</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gugu.o(.text._ZL24LL_APB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL24LL_APB1_GRP1_EnableClockj
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[225]"></a>_ZL29LL_TIM_DisableMasterSlaveModeP11TIM_TypeDef</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gugu.o(.text._ZL29LL_TIM_DisableMasterSlaveModeP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL29LL_TIM_DisableMasterSlaveModeP11TIM_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gugu::init()
</UL>

<P><STRONG><a name="[aa]"></a>_GLOBAL__sub_I_arm.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arm.o(.text._GLOBAL__sub_I_arm.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_arm.cpp &rArr; __cxx_global_var_init.1 &rArr; RoboticArm::RoboticArm() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm.o(.init_array)
</UL>
<P><STRONG><a name="[146]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arm.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; MechParam::MechParam__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MechParam::MechParam__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_arm.cpp
</UL>

<P><STRONG><a name="[147]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arm.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.1 &rArr; RoboticArm::RoboticArm() &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboticArm::RoboticArm()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_arm.cpp
</UL>

<P><STRONG><a name="[ab]"></a>_GLOBAL__sub_I_kinematics.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, kinematics.o(.text._GLOBAL__sub_I_kinematics.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_kinematics.cpp &rArr; __cxx_global_var_init &rArr; Kinematics::Kinematics()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinematics.o(.init_array)
</UL>
<P><STRONG><a name="[16f]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kinematics.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; Kinematics::Kinematics()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematics::Kinematics()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_kinematics.cpp
</UL>

<P><STRONG><a name="[ac]"></a>_GLOBAL__sub_I_dynamics.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dynamics.o(.text._GLOBAL__sub_I_dynamics.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_dynamics.cpp &rArr; __cxx_global_var_init &rArr; Dynamics::Dynamics()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamics.o(.init_array)
</UL>
<P><STRONG><a name="[164]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dynamics.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; Dynamics::Dynamics()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamics::Dynamics()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_dynamics.cpp
</UL>

<P><STRONG><a name="[22c]"></a>_ZL21LL_IWDG_ReloadCounterP12IWDG_TypeDef</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, iwdg.o(.text._ZL21LL_IWDG_ReloadCounterP12IWDG_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ZL21LL_IWDG_ReloadCounterP12IWDG_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg::feed()
</UL>

<P><STRONG><a name="[ad]"></a>_GLOBAL__sub_I_fdcan.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fdcan.o(.text._GLOBAL__sub_I_fdcan.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _GLOBAL__sub_I_fdcan.cpp &rArr; __cxx_global_var_init &rArr; SelfCanFIFO::SelfCanFIFO__sub_object(FDCAN_HandleTypeDef*) &rArr; MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdcan.o(.init_array)
</UL>
<P><STRONG><a name="[166]"></a>__cxx_global_var_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fdcan.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __cxx_global_var_init &rArr; SelfCanFIFO::SelfCanFIFO__sub_object(FDCAN_HandleTypeDef*) &rArr; MyCanTxStruct::MyCanTxStruct__sub_object(unsigned, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCanFIFO::SelfCanFIFO__sub_object(FDCAN_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_fdcan.cpp
</UL>

<P><STRONG><a name="[120]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[121]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[122]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
</UL>

<P><STRONG><a name="[123]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[ff]"></a>LL_RCC_GetUARTClockSource</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetUARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[106]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[101]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[102]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[127]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[125]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[126]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[128]"></a>LL_RCC_PLL_GetR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetR))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[103]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[104]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[107]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetPCLK2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[100]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[124]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32g4xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[fb]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[fc]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[fd]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[f9]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[fa]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[f8]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[115]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[118]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[117]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetHWFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[119]"></a>LL_USART_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[116]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetStopBitsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10c]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[11a]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>

<P><STRONG><a name="[11b]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
</UL>

<P><STRONG><a name="[11c]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
</UL>

<P><STRONG><a name="[11d]"></a>LL_TIM_OC_SetCompareCH4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
</UL>

<P><STRONG><a name="[11e]"></a>LL_TIM_OC_SetCompareCH5</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH5
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC5Config
</UL>

<P><STRONG><a name="[11f]"></a>LL_TIM_OC_SetCompareCH6</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_OC_SetCompareCH6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH6
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC6Config
</UL>

<P><STRONG><a name="[109]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[10a]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[10b]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetRepetitionCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[10e]"></a>OC1Config</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32g4xx_ll_tim.o(.text.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC1Config &rArr; LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[10f]"></a>OC2Config</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, stm32g4xx_ll_tim.o(.text.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC2Config &rArr; LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[110]"></a>OC3Config</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, stm32g4xx_ll_tim.o(.text.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC3Config &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[111]"></a>OC4Config</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, stm32g4xx_ll_tim.o(.text.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[112]"></a>OC5Config</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32g4xx_ll_tim.o(.text.OC5Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OC5Config &rArr; LL_TIM_OC_SetCompareCH5
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH5
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[113]"></a>OC6Config</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32g4xx_ll_tim.o(.text.OC6Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OC6Config &rArr; LL_TIM_OC_SetCompareCH6
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH6
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[f2]"></a>LL_DMA_ConfigTransfer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g4xx_ll_dma.o(.text.LL_DMA_ConfigTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_ConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[f5]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g4xx_ll_dma.o(.text.LL_DMA_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_SetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[f3]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g4xx_ll_dma.o(.text.LL_DMA_SetMemoryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_SetMemoryAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[f4]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g4xx_ll_dma.o(.text.LL_DMA_SetPeriphAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_SetPeriphAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[f6]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32g4xx_ll_dma.o(.text.LL_DMA_SetPeriphRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[ef]"></a>NVIC_EncodePriority</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[ee]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e4]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, stm32g4xx_hal_fdcan.o(.text.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[d4]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32g4xx_hal_fdcan.o(.text.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[292]"></a>internal_alloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mallocra.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
