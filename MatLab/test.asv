clc;close all;clear all;
% 碰撞检测算法仿真  

% 1. 参数定义  
K1 = 1.0;            % 积分增益 K1  
K2 = 0.5;            % 积分增益 K2  
Td = 0.1;            % 微分时间增益  
t0 = 5.0;            % 观测器激活时间  
dt = 0.01;           % 时间步长  
simulation_time = 10; % 总仿真时间  
N = simulation_time / dt; % 离散时间点数量  

% 2. 初始化变量  
t = 0:dt:simulation_time; % 时间向量  
r = zeros(size(t)); % 碰撞观测器输出  
tau_q = zeros(1, N); % 理论驱动力  
tau_d = zeros(1, N); % 外部碰撞力  
tau_f = zeros(1, N); % 摩擦力  
e = zeros(1, N);    % 动量差值  

% 3. 模拟的输入  
% 模拟外部施加的力（例如碰撞）  
for i = 1:N  
    if t(i) >= t0  
        tau_d(i) = 1.0; % 当时间到达 t0 后施加外部碰撞力  
    end  
end  

% 4. 动力学模型 (假定 M(q), C(q, qdot), G(q) 的值)  
% 这些值应根据机器人模型进行定义  
% 这里使用随机数据进行测试  
M = 1.0; % 惯性矩阵的简化形式  
C = 0.5; % 离心力和哥氏力矩阵的简化形式  
G = 9.81; % 重力向量（简化为常数）  

% 5. 仿真循环  
for i = 2:N  
    % 计算当前状态的动量差 e  
    e(i) = (tau_q(i-1) + tau_d(i-1) + tau_f(i-1) + C * (M * (tau_q(i-1))) - G) * dt;   
    
    % 观测器输出更新  
    if t(i) >= t0  
        r(i) = K2 * r(i-1) - K1 * (e(i) - (tau_q(i-1) + tau_d(i-1) + tau_f(i-1)));  
    else  
        r(i) = r(i-1); % 在 t < t0 不激活观测器  
    end  
end  

% 6. 绘制结果  
figure;  
subplot(3,1,1);  
plot(t, tau_d, 'r--', 'LineWidth', 1.5); % 外部施加碰撞力  
xlabel('Time (s)');  
ylabel('Applied Force (N)');  
title('External Collision Force');  
grid on;  

subplot(3,1,2);  
plot(t, e, 'g-', 'LineWidth', 1.5); % 动量差值  
xlabel('Time (s)');  
ylabel('Momentum Difference (N*s)');  
title('Momentum Difference');  
grid on;  

subplot(3,1,3);  
plot(t, r, 'b-', 'LineWidth', 1.5); % 观测器输出  
xlabel('Time (s)');  
ylabel('Collision Observer Output (N)');  
title('Collision Observer Output');  
grid on;  

% 7. 判断是否发生碰撞  
collision_threshold = 0.5; % 设置碰撞阈值  
collision_detected = r > collision_threshold;  

disp('Collision Detected:');  
disp(collision_detected);